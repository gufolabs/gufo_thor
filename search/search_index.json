{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Gufo Thor is a simple tool designed for quickly setting up and evaluating NOC. It's tailored for new NOC users who want to assess NOC's capabilities and NOC developers  who need a fast development environment. Thor takes care of the complexity of NOC management,  making the process straightforward.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>To use Thor, make sure you have the following software packages installed:</p> <ul> <li>Docker</li> <li>docker-compose or the compose plugin</li> <li>Python 3.8+</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To install or update Thor, follow these steps:</p> <ol> <li>Create a dedicated directory where all configuration files will be stored.</li> <li>Navigate to the newly created directory.</li> <li>Run the installer:   <pre><code>curl https://sh.gufolabs.com/thor | sh\n</code></pre></li> <li>After installation, NOC will be launched,    and your browser will open at  https://go.getnoc.com:32777/</li> </ol> <p>Log in using the following credentials:</p> <ul> <li>Username: admin</li> <li>Password: admin</li> </ul>"},{"location":"#noc-operations-cheat-list","title":"NOC Operations Cheat List","text":"<p>Execute all actions from the directory containing the Thor configuration.  If you are using venv mode, ensure to activate the virtual environment (venv) before utilizing Thor.</p> <pre><code>. ./bin/activate\n</code></pre>"},{"location":"#start-noc","title":"Start NOC","text":"<p>Use the following command to start NOC:</p> <pre><code>gufo-thor up\n</code></pre> <p>Once NOC is ready, you will be redirected to https://go.getnoc.com:32777/ Log in using the following credentials:</p> <ul> <li>Username: admin</li> <li>Password: admin</li> </ul>"},{"location":"#stop-noc","title":"Stop NOC","text":"<p>To stop NOC, use the command:</p> <pre><code>gufo-thor stop\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>Thor's configuration is in the thor.yml file. You can use preconfigured defaults:</p> <pre><code>gufo-thor sample-config -t &lt;name&gt;\n</code></pre> <p>Where <code>&lt;name&gt;</code> can be:</p> <ul> <li><code>simple</code> - Minimal setup with a web interface only.</li> <li><code>common</code> - Setup with widely-used features for monitoring and network management.</li> <li><code>lab1</code> - Setup with lab with 3 VyOS routers for NOC evaluation and testing.</li> </ul> <p>The thor.yml structure: <pre><code># Gufo Thor configuration\nversion: \"1.0\"\nnoc:\n  tag: master\n  installation_name: Unconfigured Installation\nexpose:\n  domain_name: go.getnoc.com\n  port: 32777\nservices: [web, card]\n</code></pre></p> <p>Adapt the file to your needs and start NOC:</p> <pre><code>gufo-thor up\n</code></pre>"},{"location":"#on-gufo-stack","title":"On Gufo Stack","text":"<p>This product is a part of Gufo Stack - the collaborative effort  led by Gufo Labs. Our goal is to create a robust and flexible  set of tools to create network management software and automate  routine administration tasks.</p> <p>To do this, we extract the key technologies that have proven themselves  in the NOC and bring them as separate packages. Then we work on API, performance tuning, documentation, and testing. The NOC uses the final result as the external dependencies.</p> <p>Gufo Stack makes the NOC better, and this is our primary task. But other products can benefit from Gufo Stack too. So we believe that our effort will make  the other network management products better.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p> <p>To see unreleased changes, please see the CHANGELOG on the master branch guide.</p>"},{"location":"CHANGELOG/#0120-2025-10-26","title":"0.12.0 - 2025-10-26","text":""},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>migrate container no longer pollutes environment of other containers</li> </ul>"},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>Bundled NOC UI support.</li> <li><code>noc.language</code> setting.</li> <li><code>noc.ui_path</code> setting.</li> </ul>"},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Configs are deployed using docker's <code>configs</code> section. </li> <li>NOC's config are mounted in /etc/noc/settings.yml.</li> <li>Move postgres' password to secrets.</li> <li>Use <code>bitnamilegacy</code> images for kafka.</li> <li>Envoy 1.36.0</li> </ul>"},{"location":"CHANGELOG/#infrastructure","title":"Infrastructure","text":"<ul> <li>Use Python 3.14 for devcontainer.</li> <li>Codecov integration.</li> <li>CodeQL scanning.</li> <li>Install security patches into devcontainer.</li> <li>Gufo ACME 0.6.0</li> <li>IPython 9.4.0</li> <li>Jinja2 3.1.6</li> <li>Ruff 0.14</li> <li>devcontainer: Python debugger settings.</li> <li>Use NOC images from ghcr.io/gufolabs/noc</li> <li>Use Gufo Err for error reporting.</li> </ul>"},{"location":"CHANGELOG/#0110-2025-09-12","title":"0.11.0 - 2025-09-12","text":""},{"location":"CHANGELOG/#fixed_1","title":"Fixed","text":""},{"location":"CHANGELOG/#20-fix-default-routes-for-pool-services-if-pool-is-not-attached-to-lab","title":"20: Fix default routes for pool services if pool is not attached to lab.","text":""},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li>Secrets management.</li> <li>Generate unique <code>secret_key</code> on first start.</li> </ul>"},{"location":"CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li>expose.web: listen on all interfaces by default, if domain differs from <code>go.getnoc.com</code>.</li> <li>Docker container labels <code>noc.role</code> and <code>noc.pool</code> now are prefixed with <code>com.gufolabs.</code>.</li> <li>docker-compose.yml: Do not use yaml aliases for healthchecks.</li> </ul>"},{"location":"CHANGELOG/#infrastructure_1","title":"Infrastructure","text":"<ul> <li>gufo-loader 1.0.4</li> </ul>"},{"location":"CHANGELOG/#0100-2025-06-24","title":"0.10.0 - 2025-06-24","text":""},{"location":"CHANGELOG/#fixed_2","title":"Fixed","text":"<ul> <li>Do not show trace when docker daemon is not running.</li> </ul>"},{"location":"CHANGELOG/#added_2","title":"Added","text":"<ul> <li>mTLS support.</li> <li><code>expose.mtls_ca_cert</code> setting.</li> <li><code>logs</code> command.</li> <li><code>stats</code> command.</li> <li><code>destroy</code> command.</li> <li><code>upgrade</code> command.</li> <li>Show gufo-thor version on startup.</li> <li><code>noc.role</code> and <code>noc.pool</code> container labels.</li> </ul>"},{"location":"CHANGELOG/#changed_2","title":"Changed","text":"<ul> <li>Use <code>exec</code> to replace process' image when possible.</li> </ul>"},{"location":"CHANGELOG/#removed","title":"Removed","text":"<ul> <li>Old python's docker-compose support.</li> </ul>"},{"location":"CHANGELOG/#091-2025-06-24","title":"0.9.1 - 2025-06-24","text":""},{"location":"CHANGELOG/#fixed_3","title":"Fixed","text":"<ul> <li>Use <code>NoReturn</code> instead of <code>Never</code> for Python 3.9 and 3.10 compatibility.</li> </ul>"},{"location":"CHANGELOG/#changed_3","title":"Changed","text":"<ul> <li>static: Do not expose config and crashinfo volumes</li> </ul>"},{"location":"CHANGELOG/#090-2025-06-23","title":"0.9.0 - 2025-06-23","text":""},{"location":"CHANGELOG/#added_3","title":"Added","text":"<ul> <li>Self-signed certificates for domains which don't support CSR Proxy.</li> </ul>"},{"location":"CHANGELOG/#080-2025-06-10","title":"0.8.0 - 2025-06-10","text":""},{"location":"CHANGELOG/#fixed_4","title":"Fixed","text":"<ul> <li>CSR Proxy client uses Certifi's root CA list implicitly.</li> </ul>"},{"location":"CHANGELOG/#added_4","title":"Added","text":"<ul> <li>Network laboratories.</li> <li>Kafka flushes every message on single-node installations.</li> <li><code>expose.web</code> setting.</li> <li><code>expose.mongo</code> and <code>expose.postgres</code> settings.</li> <li><code>backup</code> volume.</li> </ul>"},{"location":"CHANGELOG/#changed_4","title":"Changed","text":"<ul> <li><code>expose.port</code> replaced with <code>expose.web.port</code> settings.</li> <li><code>crashinfo</code> volume exposed to local filesystem.</li> </ul>"},{"location":"CHANGELOG/#infrastructure_2","title":"Infrastructure","text":"<ul> <li>Use <code>ruff</code> for formatting.</li> <li>Move CI lint to separate step.</li> <li>Move dependencies from <code>.requirements/</code> to <code>pyproject.toml</code>.</li> </ul>"},{"location":"CHANGELOG/#070-2025-01-23","title":"0.7.0 - 2025-01-23","text":""},{"location":"CHANGELOG/#fixed_5","title":"Fixed","text":"<ul> <li>Do not raise exception when cannot start browser.</li> </ul>"},{"location":"CHANGELOG/#added_5","title":"Added","text":"<ul> <li>Unified login support.</li> <li><code>restart</code> command.</li> <li><code>noc.config</code> section.</li> </ul>"},{"location":"CHANGELOG/#changed_5","title":"Changed","text":"<ul> <li><code>liftbridge</code> service replaced with <code>kafka</code></li> </ul>"},{"location":"CHANGELOG/#060-2024-08-05","title":"0.6.0 - 2024-08-05","text":""},{"location":"CHANGELOG/#added_6","title":"Added","text":"<ul> <li><code>noc.migrate</code> config option.</li> <li><code>gufo-thor --migrate</code> option.</li> <li><code>crashinfo</code> volume.</li> </ul>"},{"location":"CHANGELOG/#changed_6","title":"Changed","text":"<ul> <li>Do not write <code>version</code> attribute to <code>docker-compose.yml</code>.</li> <li>Do not override the container's <code>/opt/noc/ui/pkg</code>.</li> <li><code>worker</code> service depends on <code>liftbridge</code> and <code>datastream</code>.</li> <li><code>web</code> service depends on <code>worker</code> and <code>scheduler</code>.</li> </ul>"},{"location":"CHANGELOG/#050-2024-04-20","title":"0.5.0 - 2024-04-20","text":""},{"location":"CHANGELOG/#added_7","title":"Added","text":"<ul> <li><code>gufo-thor up --no-migrate</code> option.</li> </ul>"},{"location":"CHANGELOG/#changed_7","title":"Changed","text":"<ul> <li><code>shell</code> no longer depends on <code>migrate</code>.</li> </ul>"},{"location":"CHANGELOG/#040-2023-12-29","title":"0.4.0 - 2023-12-29","text":""},{"location":"CHANGELOG/#added_8","title":"Added","text":"<ul> <li><code>envoy</code> service.</li> <li><code>thor.yml</code>: <code>noc.theme</code> parameter.</li> <li><code>static</code> service for serving static files.</li> <li><code>auth</code> service.</li> </ul>"},{"location":"CHANGELOG/#changed_8","title":"Changed","text":"<ul> <li>Code streamlining and refactoring.</li> <li>Refined service dependencies.</li> </ul>"},{"location":"CHANGELOG/#removed_1","title":"Removed","text":"<ul> <li><code>nginx</code> service.</li> <li><code>traefik</code> service.</li> </ul>"},{"location":"CHANGELOG/#033-2023-12-18","title":"0.3.3 - 2023-12-18","text":""},{"location":"CHANGELOG/#fixed_6","title":"Fixed","text":"<ul> <li>Fixed ping container capabilities.</li> </ul>"},{"location":"CHANGELOG/#added_9","title":"Added","text":"<ul> <li>curl/sh installation script.</li> <li>docs: Configuration reference.</li> <li>docs: Configuration templates.</li> <li>docs: Command Line reference.</li> </ul>"},{"location":"CHANGELOG/#changed_9","title":"Changed","text":"<ul> <li>docs: Updated installation guide.</li> </ul>"},{"location":"CHANGELOG/#032-2023-12-10","title":"0.3.2 - 2023-12-10","text":""},{"location":"CHANGELOG/#fixed_7","title":"Fixed","text":"<ul> <li>Mount consul's config in read/write mode to prevent the permissions changing error.</li> </ul>"},{"location":"CHANGELOG/#added_10","title":"Added","text":"<ul> <li>Upgrade instructuons.</li> </ul>"},{"location":"CHANGELOG/#031-2023-12-10","title":"0.3.1 - 2023-12-10","text":""},{"location":"CHANGELOG/#fixed_8","title":"Fixed","text":"<ul> <li><code>FileNotFoundError</code> when writing nginx keys.</li> </ul>"},{"location":"CHANGELOG/#changed_10","title":"Changed","text":"<ul> <li><code>write_file</code> accepts content as <code>str</code> and <code>bytes</code>.</li> </ul>"},{"location":"CHANGELOG/#030-2023-11-28","title":"0.3.0 - 2023-11-28","text":""},{"location":"CHANGELOG/#added_11","title":"Added","text":"<ul> <li>config: <code>project</code> option.</li> <li>config: <code>service.&lt;name&gt;.scale</code> option.</li> <li>jinja2 templates for configs.</li> <li>Perform all migrations and collections loading.</li> <li>Helthchecks for traefik and NOC services.</li> </ul>"},{"location":"CHANGELOG/#changed_11","title":"Changed","text":"<ul> <li>Less verbose logging.</li> <li>Mount service configurations as read-only.</li> <li>Store persistent data in named volumes.</li> </ul>"},{"location":"CHANGELOG/#removed_2","title":"Removed","text":"<ul> <li><code>BaseService.compose_etc_dirs</code> and <code>.get_compose_etc_dirs()</code></li> </ul>"},{"location":"CHANGELOG/#020-2023-11-23","title":"0.2.0 - 2023-11-23","text":""},{"location":"CHANGELOG/#added_12","title":"Added","text":"<ul> <li><code>shell</code> command.</li> <li>Auto-detect docker configuration.</li> <li>Auto-select between docker compose plugin and <code>docker-compose</code>.</li> <li>Config: <code>expose.open_browser</code> option.</li> </ul>"},{"location":"CHANGELOG/#changed_12","title":"Changed","text":"<ul> <li>Configure <code>docker-compose.yml</code> logging section when using <code>json-file</code> driver.</li> </ul>"},{"location":"CHANGELOG/#010-2023-11-23","title":"0.1.0 - 2023-11-23","text":""},{"location":"CHANGELOG/#added_13","title":"Added","text":"<ul> <li>Initial release.</li> </ul>"},{"location":"LICENSE/","title":"License","text":"<p>Copyright \u00a9 2023-2025, Gufo Labs. All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ol> <li>Redistributions of source code must retain the above copyright notice,    this list of conditions and the following disclaimer.</li> <li>Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the    documentation and/or other materials provided with the distribution.</li> <li>Neither the name of Gufo Labs nor the names of its contributors may be used    to endorse or promote products derived from this software without    specific prior written permission.</li> </ol> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>"},{"location":"faq/","title":"FAQ","text":"<p>What is \"Gufo\"?</p> <p>Gufo means the Owl in Italian.</p> <p>Why the owls?</p> <p>We love owls and the viable parts of our technologies were proven at the project, named \"the Owl\".</p> <p>What is \"Gufo Labs\"?</p> <p>Gufo Labs is the Milan-based company specialized on network and IT consulting, and on software research.</p> <p>What is \"Gufo Stack\"?</p> <p>We've extracted core components behind the NOC  and released them as independent packages, available under the terms  of the 3-clause BSD license. Our software shares common code quality standards  and is battle-proven under the high load. We hope our key components will help  the engineers and the developers to build reliable networks and robust network  management software.  See more for details.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>To use Thor, make sure you have the following software packages installed:</p> <ul> <li>Docker</li> <li>docker-compose or the compose plugin</li> <li>Python 3.8+</li> </ul>"},{"location":"installation/#system-level-installation","title":"System-Level Installation","text":"<p>For dedicated NOC hosts, use this installation method.  It installs Thor and all required libraries into the system default location.</p> <pre><code>curl https://sh.gufolabs.com/thor | sh\n</code></pre>"},{"location":"installation/#python-venv-installation","title":"Python VENV Installation","text":"<p>For evaluation, testing, and development purposes, use this installation method.  It creates a dedicated Python virtual environment (venv) and isolates Thor along  with all dependent libraries from other systems.</p> <pre><code>python -m venv .\n. ./bin/activate\ncurl https://sh.gufolabs.com/thor | sh\n</code></pre> <p>Later, when using Thor, make sure to activate the virtual environment (venv):</p> <pre><code>. ./bin/activate\n</code></pre>"},{"location":"installation/#checking-the-installation","title":"Checking the Installation","text":"<p>To check the installation just import the module</p> <pre><code>gufo-thor version\n</code></pre>"},{"location":"installation/#upgrading","title":"Upgrading","text":"<p>To upgrade existing Gufo Thor installation use pip</p> <pre><code>$ pip3 install --upgrade gufo-thor\n</code></pre>"},{"location":"installation/#uninstalling","title":"Uninstalling","text":"<p>To uninstall Gufo Thor use pip</p> <pre><code>$ pip3 uninstall gufo-thor\n</code></pre>"},{"location":"dev/","title":"Gufo Thor: Developer's Guide","text":"<p>This section is intended for Gufo Thor developers and for entities,  including both individuals and companies, interested in contributing to the project.</p> <ul> <li>Developer's Environment</li> <li>Building and Testing</li> <li>Common Tasks</li> <li>Code Quality</li> <li>Code Base</li> <li>Contributing Guide</li> <li>Code of Conduct</li> <li>Supported Standards</li> </ul>"},{"location":"dev/CODE_OF_CONDUCT/","title":"Gufo Stack Code of Conduct","text":"<p>Gufo Stack are the tools built by people for people. We aim to create a respectful, collaborative, and constructive community where everyone can contribute to building better software.</p>"},{"location":"dev/CODE_OF_CONDUCT/#the-rule","title":"The Rule","text":"<p>\u201cAnd as you wish that others would do to you, do so to them.\u201d</p> <p>-- Luke 6:31</p>"},{"location":"dev/CODE_OF_CONDUCT/#the-note","title":"The Note","text":"<p>This principle is universal. Similar wisdom can be found in many traditions:</p> <ul> <li>Confucius: \u201cDo not impose on others what you do not wish for yourself.\u201d (Analects 15:24)</li> <li>Prophet Muhammad (peace be upon him): \u201cNone of you [truly] believes until he loves for his brother what he loves for himself.\u201d (Hadith, Sahih Muslim 45:71)</li> </ul> <p>That\u2019s all.</p>"},{"location":"dev/CONTRIBUTING/","title":"Types of contributions","text":"<p>You can contribute to the Gufo Labs projects in several way. This repo is a place to discuss and collaborate on GitHub! Our team is maintaining this repo to preserve our bandwidth, off topic conversations will be closed.</p>"},{"location":"dev/CONTRIBUTING/#discussions","title":"Discussions","text":"<p>Discussions are where we have conversations.</p> <p>If you'd like help troubleshooting a PR you're working on, have a great new idea, or want to share something amazing you've learned in our docs, join us in discussions.</p>"},{"location":"dev/CONTRIBUTING/#issues","title":"Issues","text":"<p>Issues are used to track tasks that contributors can help with. </p> <p>If you've found bug, or something in the content of the documentation that should be updated, search open issues to see if someone else has reported the same thing. If it's something new, open an issue. We'll use the issue to have a conversation about the problem you want to fix.</p>"},{"location":"dev/CONTRIBUTING/#pull-requests","title":"Pull requests","text":"<p>A pull request is a way to suggest changes in our repository.</p>"},{"location":"dev/codebase/","title":"Project's Code Base","text":"<p>The code base of the project has following structure:</p> <ul> <li><code>.devcontainer/</code> - Developer's container configuration for    VSCode Remote Containers. Just reopen   project in remote container to get ready-to-development   environment.</li> <li> <p><code>.github/</code> - GitHub settings</p> <ul> <li><code>workflows/</code> - GitHub Actions Workflows settings.   Used to run tests and build the documentation.</li> </ul> </li> <li> <p><code>docs/</code> - Mkdocs documentation.</p> </li> <li><code>src/gufo/thor/</code> - Project's source code.</li> <li><code>samples</code> - <code>thor.yml</code> condif samples.</li> <li><code>services</code> - services definitions.</li> <li><code>targets</code> - targets implementations.</li> <li><code>tests/</code> - Project's Pytest test suite.</li> <li><code>tools/</code> - Various scripts.</li> <li><code>.gitignore</code> - Gitignore file.</li> <li><code>Dockerfile</code> - Dockerfile for development container.</li> <li><code>mkdocs.yml</code> - Mkdocs configuration file.</li> <li><code>pyproject.toml</code> - pyproject.toml file for python tools configuration.</li> </ul>"},{"location":"dev/codequality/","title":"Code Quality Guide","text":"<p>We share the common code quality standards between all Gufo Labs projects.</p>"},{"location":"dev/codequality/#python-code-formatting","title":"Python Code Formatting","text":"<p>All Python code must be formatting using ruff code formatter with settings defined in the project's <code>pyproject.toml</code> file.</p>"},{"location":"dev/codequality/#python-code-linting","title":"Python Code Linting","text":"<p>All Python code must pass ruff tests with the project's settings.</p>"},{"location":"dev/codequality/#python-code-static-checks","title":"Python Code Static Checks","text":"<p>All python code must pass Mypy type checks in the <code>strict</code> mode.</p>"},{"location":"dev/codequality/#test-suite-coverage","title":"Test Suite Coverage","text":"<p>The test suite must provide 100% code coverage whenever possible.</p>"},{"location":"dev/codequality/#documentation-standards","title":"Documentation Standards","text":"<ul> <li>Documentation must be clean and mean.</li> </ul>"},{"location":"dev/common/","title":"Developer's Common  Tasks","text":""},{"location":"dev/common/#bump-version","title":"Bump Version","text":"<ul> <li> Change <code>__version__</code> in <code>src/gufo/thor/__init__.py</code></li> <li> Add section in <code>CHANGELOG.md</code></li> </ul>"},{"location":"dev/environment/","title":"Developer's Environment","text":"<p>To participate in development you need to prepare the developer's environment first. Depending on the preferable tools, your mileage may vary.</p>"},{"location":"dev/environment/#visual-studio-code-dev-container","title":"Visual Studio Code Dev Container","text":"<p>The easiest way to start the development is to use Visual Studio Code with Remote Containers plugin. Just click on the green sign in the lower-left corner and select the \"Reopen in Container\" menu item. You'll get all the required formatting and linting settings out of the box.</p>"},{"location":"dev/standards/","title":"Supported Standards","text":"<p>Gufo Thor implements and is guided by the following standards:</p>"},{"location":"dev/standards/#python-pep","title":"Python PEP","text":"<ul> <li>PEP8: Style Guide for Python Code</li> <li>PEP561: Distributing and Packaging Type Information</li> </ul>"},{"location":"dev/testing/","title":"Building and Testing","text":"<p>Before starting building and testing package set up  Developer's Environment first. From here and below we consider the shell's current directory matches the project's root directory.</p>"},{"location":"dev/testing/#building-package","title":"Building Package","text":"<p>To test the package build run:</p> <pre><code>$ python -m build --sdist --wheel\n</code></pre> <p>Compiled packages will be available in the <code>dist/</code> directory.</p>"},{"location":"dev/testing/#running-tests","title":"Running tests","text":"<p>To run the test suit:</p> <pre><code>$ pytest -vv\n</code></pre>"},{"location":"dev/testing/#running-lints","title":"Running Lints","text":"<p>All lints are checked as part of GitHub Actions Workflow. You may run lints manually before committing to the project.</p>"},{"location":"dev/testing/#check-formatting","title":"Check Formatting","text":"<p>Python Code Formatting is the mandatory requirement in our Code Quality standards. To check code formatting run:</p> <pre><code>$ ruff format --check examples/ src/ tests/\n</code></pre> <p>To fix formatting errors run: <pre><code>$ ruff format src/ tests/\n</code></pre></p> <p>We recommend setting python code formatting on file saving (Done in VS Code Dev Container out of the box).</p>"},{"location":"dev/testing/#python-code-lints","title":"Python Code Lints","text":"<p>Python Code Linting is the mandatory requirement in our Code Quality standards. To check code for linting errors run:</p> <pre><code>$ ruff examples/ src/ tests/\n</code></pre>"},{"location":"dev/testing/#python-code-static-checks","title":"Python Code Static Checks","text":"<p>Python Code Static Checks is the mandatory requirement in our Code Quality standards. To check code for typing errors run:</p> <pre><code>$ mypy --strict src/\n</code></pre>"},{"location":"dev/testing/#python-test-code-coverage-check","title":"Python Test Code Coverage Check","text":"<p>To evaluate code coverage run tests:</p> <pre><code>$ coverage run -m pytest -vv\n</code></pre> <p>To report the coverage after the test run:</p> <pre><code>$ coverage report\n</code></pre> <p>To show line-by-line coverage:</p> <pre><code>$ coverage html\n</code></pre> <p>Then open <code>dist/coverage/index.html</code> file in your browser.</p>"},{"location":"dev/testing/#building-documentation","title":"Building Documentation","text":"<p>To rebuild and check documentation run</p> <pre><code>$ mkdocs serve\n</code></pre> <p>We recommend using Grammarly service to check documentation for common errors.</p>"},{"location":"reference/","title":"Gufo Thor Reference","text":"<p>This section contains formal technical references related to Gufo Thor:</p> <ul> <li>Command Line Reference.</li> <li>Config Reference - thor.yml - Config File Reference.</li> <li>Configuration Templates - Configuration Templates.</li> <li>Core Reference - Gufo Thor Source Code Reference.</li> </ul>"},{"location":"reference/cli/","title":"Command Line Reference","text":"<p>Gufo Thor is managed via <code>gufo-thor</code> command.</p>"},{"location":"reference/cli/#show-version","title":"Show Version","text":"<p>To show Gufo Thor version use: <pre><code>gufo-thor version\n</code></pre></p>"},{"location":"reference/cli/#generate-sample-config","title":"Generate Sample Config","text":"<p>To generate sample config use:</p> <pre><code>gufo-thor sample-config -t &lt;config_name&gt;\n</code></pre> <p>where <code>&lt;config_name&gt;</code> is the name of the template. Refer to the Configuration Templates for details.</p>"},{"location":"reference/cli/#prepare","title":"Prepare","text":"<p>To generate all necessary configs without launching NOC use</p> <pre><code>gufo-thor prepare\n</code></pre>"},{"location":"reference/cli/#running-noc","title":"Running NOC","text":"<p>To run NOC use:</p> <pre><code>gufo-thor up\n</code></pre> <p>Note</p> <p>This command performs prepare automatically.</p>"},{"location":"reference/cli/#stopping-noc","title":"Stopping NOC","text":"<p>To stop NOC use:</p> <pre><code>gufo-thor stop\n</code></pre>"},{"location":"reference/cli/#restarting-process","title":"Restarting Process","text":"<p>To restart NOC process use:</p> <pre><code>gufo-thor restart &lt;process name&gt;\n</code></pre> <p>Example:</p> <pre><code>gufo-thor restart web\n</code></pre>"},{"location":"reference/cli/#running-shell","title":"Running Shell","text":"<p>To run NOC shell use:</p> <pre><code>gufo-thor shell\n</code></pre>"},{"location":"reference/cli/#show-stats","title":"Show Stats","text":"<p>To show NOC processes' statistics use:</p> <pre><code>gufo-thor stats\n</code></pre>"},{"location":"reference/cli/#show-process-logs","title":"Show Process' Logs","text":"<p>To show NOC process' logs use:</p> <pre><code>gufo-thor logs &lt;process name&gt;\n</code></pre> <p>Example:</p> <pre><code>gufo-thor logs web\n</code></pre> <p>To use logs in follow mode:</p> <pre><code>gufo-thor logs -f &lt;process name&gt;\n</code></pre>"},{"location":"reference/cli/#upgrading-noc","title":"Upgrading NOC","text":"<p>To upgrade NOC to a new version use:</p> <pre><code>gufo-thor upgrade\n</code></pre>"},{"location":"reference/cli/#destroying-installation","title":"Destroying Installation","text":"<p>To destroy installation and free resources:</p> <pre><code>gufo-thor destroy\n</code></pre>"},{"location":"reference/templates/","title":"Gufo Thor Configuration Templates","text":"<p>Gufo Thor is provided with several predefined templates which addresses various patterns of usage:</p> <ul> <li>simple - web-only setup.</li> <li>common - web and hardware integration.</li> <li>lab1 - Full hardware integration stack and lab with 3 VyOS routers.</li> </ul> <p>To generate template config use:</p> <pre><code>gufo-thor sample-config -t &lt;template name&gt;\n</code></pre>"},{"location":"reference/templates/#simple","title":"simple","text":"<p>Simple web-only installation.</p> <pre><code># Gufo Thor configuration\nversion: \"1.0\"\nnoc:\n  tag: master\n  installation_name: Unconfigured Installation\n  theme: noc\nexpose:\n  domain_name: go.getnoc.com\n  web:\n    port: 32777\n  open_browser: true\nservices: [web, card, shell]\n</code></pre>"},{"location":"reference/templates/#common","title":"common","text":"<p>Installation with web interface, hardware integration, and event-processing pipeline.</p> <pre><code># Gufo Thor configuration\nversion: \"1.0\"\nnoc:\n  tag: master\n  installation_name: Unconfigured Installation\n  theme: noc\nexpose:\n  domain_name: go.getnoc.com\n  web:\n    port: 32777\n  open_browser: true\npools:\n  default:\n    subnet: 192.168.100.0/24\nservices:\n  - web\n  - card\n  - scheduler\n  - discovery-default\n  - activator-default\n  - classifier-default\n  - correlator-default\n  - syslogcollector-default\n  - trapcollector-default\n  - ping-default\n  - shell\n</code></pre>"},{"location":"reference/templates/#lab1","title":"lab1","text":"<p>Full hardware-integration stack with sample lab with 3 VyOS routers connected in ring.</p> <pre><code># Gufo Thor configuration\nversion: \"1.0\"\nnoc:\n  tag: master\n  installation_name: Unconfigured Installation\n  theme: noc\nexpose:\n  domain_name: go.getnoc.com\n  web:\n    port: 32777\n  open_browser: true\npools:\n  vyos:\n    subnet: 10.0.2.0/24\n    address:\n      syslog: 10.0.2.10\n      trap: 10.0.2.11\nservices:\n  - web\n  - card\n  - scheduler\n  - chwriter\n  - classifier-vyos\n  - correlator-vyos\n  - discovery-vyos\n  - ping-vyos\n  - syslogcollector-vyos\n  - trapcollector-vyos\nlabs:\n  lab1:\n    nodes:\n      r1:\n        type: vyos\n        version: \"1.4\"\n        router-id: 10.0.0.1\n        pool-gw: true\n        users:\n          - user: vy1\n            password: secret1\n        snmp:\n          - version: v2c\n            community: public1\n      r2:\n        type: vyos\n        version: \"1.4\"\n        router-id: 10.0.0.2\n        users:\n          - user: vy2\n            password: secret2\n        snmp:\n          - version: v2c\n            community: public2\n      r3:\n        type: vyos\n        version: \"1.4\"\n        router-id: 10.0.0.3\n        users:\n          - user: vy3\n            password: secret3\n        snmp:\n          - version: v2c\n            community: public3\n    links:\n      - prefix: 10.0.1.0/30\n        node-a: r1\n        node-z: r2\n        protocols:\n          isis:\n            metric: 100\n      - prefix: 10.0.1.4/30\n        node-a: r1\n        node-z: r3\n        protocols:\n          isis:\n            metric: 100\n      - prefix: 10.0.1.8/30\n        node-a: r2\n        node-z: r3\n        protocols:\n          isis:\n            metric: 100\n</code></pre>"},{"location":"reference/code/SUMMARY/","title":"SUMMARY","text":"<ul> <li>gufo.thor<ul> <li>artefact</li> <li>cli</li> <li>config</li> <li>docker</li> <li>error</li> <li>ip</li> <li>labs<ul> <li>base</li> <li>vyos</li> </ul> </li> <li>log</li> <li>secret</li> <li>services<ul> <li>activator</li> <li>auth</li> <li>base</li> <li>bh</li> <li>bi</li> <li>card</li> <li>chwriter</li> <li>classifier</li> <li>clickhouse</li> <li>consul</li> <li>correlator</li> <li>datasource</li> <li>datastream</li> <li>discovery</li> <li>envoy</li> <li>escalator</li> <li>grafanads</li> <li>icqsender</li> <li>kafka</li> <li>kafkasender</li> <li>login</li> <li>mailsender</li> <li>metrics</li> <li>metricscollector</li> <li>mib</li> <li>migrate</li> <li>mongo</li> <li>mrt</li> <li>mx</li> <li>nbi</li> <li>noc</li> <li>ping</li> <li>postgres</li> <li>runner</li> <li>sae</li> <li>scheduler</li> <li>selfmon</li> <li>shell</li> <li>static</li> <li>syslogcollector</li> <li>tgsender</li> <li>topo</li> <li>trapcollector</li> <li>ui</li> <li>web</li> <li>worker</li> <li>zeroconf</li> </ul> </li> <li>targets<ul> <li>base</li> <li>compose</li> </ul> </li> <li>utils</li> <li>validator</li> </ul> </li> </ul>"},{"location":"reference/code/gufo/thor/","title":"gufo.thor","text":"<p>Simple NOC management tool.</p> <p>Attributes:</p> Name Type Description <code>__version__</code> <code>str</code> <p>Gufo Thor version</p>"},{"location":"reference/code/gufo/thor/artefact/","title":"gufo.thor.artefact","text":"<p>Artefact class.</p>"},{"location":"reference/code/gufo/thor/artefact/#gufo.thor.artefact.Artefact","title":"<code>Artefact</code>","text":"<p>               Bases: <code>object</code></p> <p>Artefact.</p> <p>Artefacts are delivered to the containers and may contain various configuration settings. Delivery methods may vary depending on target.</p> <p>Artefact may refer to a single file or to a directory. If artefact refers to directory, all directory members are exposed as single file.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Unique artefact name.</p> required <code>local_path</code> <code>Path</code> <p>Artefact path on thor's local filesystem.</p> required"},{"location":"reference/code/gufo/thor/artefact/#gufo.thor.artefact.Artefact.__repr__","title":"<code>__repr__()</code>","text":"<p>repr() implementation.</p>"},{"location":"reference/code/gufo/thor/artefact/#gufo.thor.artefact.Artefact.at","title":"<code>at(container_path)</code>","text":"<p>Get mounted artefact.</p> <p>Parameters:</p> Name Type Description Default <code>container_path</code> <code>Path</code> <p>Path in the container.</p> required <p>Returns:</p> Type Description <code>Artefact</code> <p>Mounted artefact instance.</p>"},{"location":"reference/code/gufo/thor/artefact/#gufo.thor.artefact.Artefact.copy_from","title":"<code>copy_from(src)</code>","text":"<p>Copy file from source file.</p> <p>Parameters:</p> Name Type Description Default <code>src</code> <code>Path</code> <p>Source file path.</p> required"},{"location":"reference/code/gufo/thor/artefact/#gufo.thor.artefact.Artefact.iter_mounts","title":"<code>iter_mounts()</code>","text":"<p>Iterate over artefacts's mount points.</p> <p>Artefact must be mounted and obtained via <code>at()</code>.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>on misconfigurations.</p>"},{"location":"reference/code/gufo/thor/artefact/#gufo.thor.artefact.Artefact.write","title":"<code>write(data)</code>","text":"<p>Write data to artefact.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>File contains.</p> required"},{"location":"reference/code/gufo/thor/artefact/#gufo.thor.artefact.ArtefactMountPoint","title":"<code>ArtefactMountPoint</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>Artefact mounting point.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Unique artefact name.</p> <code>local_path</code> <code>Path</code> <p>Path to the artefact on local file system.</p> <code>container_path</code> <code>Path</code> <p>Path to the artefact in the container.</p>"},{"location":"reference/code/gufo/thor/artefact/#gufo.thor.artefact.ArtefactMountPoint.__hash__","title":"<code>__hash__()</code>","text":"<p>hash() implementation.</p>"},{"location":"reference/code/gufo/thor/cli/","title":"gufo.thor.cli","text":"<p><code>gufo-thor</code> command-line utility.</p> <p>Attributes:</p> Name Type Description <code>NAME</code> <code>str</code> <p>Utility name</p>"},{"location":"reference/code/gufo/thor/cli/#gufo.thor.cli.Cli","title":"<code>Cli</code>","text":"<p>               Bases: <code>object</code></p> <p><code>gufo-thor</code> CLI utility class.</p>"},{"location":"reference/code/gufo/thor/cli/#gufo.thor.cli.Cli.config","title":"<code>config</code>  <code>cached</code> <code>property</code>","text":"<p>Get config.</p> <p>Returns:</p> Type Description <code>Config</code> <p>Config instance.</p>"},{"location":"reference/code/gufo/thor/cli/#gufo.thor.cli.Cli.target","title":"<code>target</code>  <code>cached</code> <code>property</code>","text":"<p>Get target.</p> <p>Returns:</p> Type Description <code>BaseTarget</code> <p>Target instance.</p>"},{"location":"reference/code/gufo/thor/cli/#gufo.thor.cli.Cli.confirm","title":"<code>confirm(question, ns)</code>","text":"<p>Ask for confirmation.</p>"},{"location":"reference/code/gufo/thor/cli/#gufo.thor.cli.Cli.die","title":"<code>die(msg=None)</code>  <code>staticmethod</code>","text":"<p>Die with message.</p>"},{"location":"reference/code/gufo/thor/cli/#gufo.thor.cli.Cli.get_handler","title":"<code>get_handler(name)</code>","text":"<p>Get handler for command.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Command name</p> required <p>Returns:</p> Type Description <code>Callable[[Namespace], ExitCode]</code> <p>Callable, accepting Namespace and returning exit code</p>"},{"location":"reference/code/gufo/thor/cli/#gufo.thor.cli.Cli.handle_destroy","title":"<code>handle_destroy(ns)</code>","text":"<p>Destroy installation.</p>"},{"location":"reference/code/gufo/thor/cli/#gufo.thor.cli.Cli.handle_logs","title":"<code>handle_logs(ns)</code>","text":"<p>Show logs.</p>"},{"location":"reference/code/gufo/thor/cli/#gufo.thor.cli.Cli.handle_prepare","title":"<code>handle_prepare(ns)</code>","text":"<p>Prepare NOC configuration.</p>"},{"location":"reference/code/gufo/thor/cli/#gufo.thor.cli.Cli.handle_restart","title":"<code>handle_restart(ns)</code>","text":"<p>Restart services.</p>"},{"location":"reference/code/gufo/thor/cli/#gufo.thor.cli.Cli.handle_sample_config","title":"<code>handle_sample_config(ns)</code>","text":"<p>Generate sample config.</p>"},{"location":"reference/code/gufo/thor/cli/#gufo.thor.cli.Cli.handle_shell","title":"<code>handle_shell(ns)</code>","text":"<p>Run shell.</p>"},{"location":"reference/code/gufo/thor/cli/#gufo.thor.cli.Cli.handle_stats","title":"<code>handle_stats(ns)</code>","text":"<p>Show stats.</p>"},{"location":"reference/code/gufo/thor/cli/#gufo.thor.cli.Cli.handle_stop","title":"<code>handle_stop(ns)</code>","text":"<p>Stop NOC.</p>"},{"location":"reference/code/gufo/thor/cli/#gufo.thor.cli.Cli.handle_up","title":"<code>handle_up(ns)</code>","text":"<p>Prepare NOC configuration and run NOC.</p>"},{"location":"reference/code/gufo/thor/cli/#gufo.thor.cli.Cli.handle_upgrade","title":"<code>handle_upgrade(ns)</code>","text":"<p>Upgrade NOC.</p>"},{"location":"reference/code/gufo/thor/cli/#gufo.thor.cli.Cli.handle_version","title":"<code>handle_version(_ns)</code>","text":"<p>Print Gufo Thor version.</p> <p>Parameters:</p> Name Type Description Default <code>_ns</code> <code>Namespace</code> <p>Options namespace, ignored.</p> required <p>Returns:</p> Type Description <code>ExitCode</code> <p>Exit code.</p>"},{"location":"reference/code/gufo/thor/cli/#gufo.thor.cli.Cli.run","title":"<code>run(args)</code>","text":"<p>Parse command-line arguments and run appropriate command.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>List[str]</code> <p>List of command-line arguments</p> required <p>Returns:     ExitCode</p>"},{"location":"reference/code/gufo/thor/cli/#gufo.thor.cli.Cli.setup_logging","title":"<code>setup_logging()</code>","text":"<p>Setup logger.</p>"},{"location":"reference/code/gufo/thor/cli/#gufo.thor.cli.ExitCode","title":"<code>ExitCode</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Cli exit codes.</p> <p>Attributes:</p> Name Type Description <code>OK</code> <p>Successful exit</p>"},{"location":"reference/code/gufo/thor/cli/#gufo.thor.cli.main","title":"<code>main()</code>","text":"<p>Run <code>noc-thor</code> with command-line arguments.</p>"},{"location":"reference/code/gufo/thor/config/","title":"gufo.thor.config","text":"<p>Config data structures.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.CliConfig","title":"<code>CliConfig</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>Config populated during runtime.</p> <p>Should not be set by user. Populated from CLI options.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.Config","title":"<code>Config</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>The Gufo Thor config.</p> <p>Attributes:</p> Name Type Description <code>project</code> <code>Optional[str]</code> <p>Optional project name used to prefix the services and volumes. If not set - directory name is used. Should be unique within Thor projects on same host.</p> <code>noc</code> <code>NocConfig</code> <p>The <code>noc</code> section of the config.</p> <code>expose</code> <code>ExposeConfig</code> <p>The <code>expose</code> section of the config.</p> <code>services</code> <code>Dict[str, ServiceConfig]</code> <p>The <code>services</code> section of the config.</p> <code>labs</code> <code>Dict[str, LabConfig]</code> <p>The <code>labs</code> section of the config.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.Config.default","title":"<code>default()</code>  <code>staticmethod</code>","text":"<p>Generate default config.</p> <p>Returns:</p> Type Description <code>Config</code> <p>An Config instance</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.Config.from_file","title":"<code>from_file(path)</code>  <code>staticmethod</code>","text":"<p>Read file and return instance of the Config.</p> <p>Dies if config contains errors.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[Path, str]</code> <p>File path.</p> required <p>Returns:</p> Type Description <code>Config</code> <p>Config instance.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.Config.from_yaml","title":"<code>from_yaml(data)</code>  <code>staticmethod</code>","text":"<p>Parse YAML file and return an instance of the Config.</p> <p>Dies if config contains errors.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>String containing YAML config.</p> required <p>Returns:</p> Type Description <code>Config</code> <p>An Config instance.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.ExposeConfig","title":"<code>ExposeConfig</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>The <code>expose</code> section of the config.</p> <p>Attributes:</p> Name Type Description <code>domain_name</code> <code>str</code> <p>A domain name through which the NOC's user interface will be accessed in browser.</p> <code>web</code> <code>Optional[Listen]</code> <p>Web listener configuration.</p> <code>port</code> <code>Optional[Listen]</code> <p>An HTTPS port of the NOC's user interface (deprecated).</p> <code>open_browser</code> <code>bool</code> <p>Open browser on startup.</p> <code>mtls_ca_cert</code> <code>Optional[str]</code> <p>When set, enables mTLS and defines CA certificate path, relative to <code>assets</code></p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.ExposeConfig.default","title":"<code>default()</code>  <code>staticmethod</code>","text":"<p>Get default ExposeConfig.</p> <p>Returns:</p> Type Description <code>ExposeConfig</code> <p>ExposeConfig instance.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.ExposeConfig.from_dict","title":"<code>from_dict(data)</code>  <code>staticmethod</code>","text":"<p>Generate ExposeConfig instance from a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict[str, Any]</code> <p>Incoming data.</p> required <p>Returns:</p> Type Description <code>ExposeConfig</code> <p>A configured ExposeConfig instance.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.IsisLinkProtocolConfig","title":"<code>IsisLinkProtocolConfig</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>ISIS protocol configuration for link.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.IsisLinkProtocolConfig.from_dict","title":"<code>from_dict(data)</code>  <code>staticmethod</code>","text":"<p>Generate IsisLinkProtocolConfig from dict.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict[str, Any]</code> <p>Incoming data.</p> required <p>Returns:</p> Type Description <code>IsisLinkProtocolConfig</code> <p>IsisLinkProtocolConfig instance.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.LabConfig","title":"<code>LabConfig</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>The <code>labs</code> section of the config.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>lab name.</p> <code>nodes</code> <code>Dict[str, LabNodeConfig]</code> <p>Nodes configuration.</p> <code>pool</code> <code>Optional[str]</code> <p>Lab pool.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.LabConfig.check","title":"<code>check()</code>","text":"<p>Check config.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.LabConfig.from_dict","title":"<code>from_dict(name, data)</code>  <code>staticmethod</code>","text":"<p>Generate LabConfig instance from a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Lab name.</p> required <code>data</code> <code>Dict[str, Any]</code> <p>Incoming data.</p> required <p>Returns:</p> Type Description <code>LabConfig</code> <p>A configured LabConfig instance.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.LabLinkConfig","title":"<code>LabLinkConfig</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>Link item.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.LabLinkConfig.from_dict","title":"<code>from_dict(data)</code>  <code>staticmethod</code>","text":"<p>Create link item from config.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.LabNodeConfig","title":"<code>LabNodeConfig</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>The <code>labs.nodes</code> section of config.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.LabNodeConfig.from_dict","title":"<code>from_dict(name, data)</code>  <code>staticmethod</code>","text":"<p>Generate LabNodeConfig from dict.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Node name.</p> required <code>data</code> <code>Dict[str, Optional[str]]</code> <p>Incoming data.</p> required <p>Returns:</p> Type Description <code>LabNodeConfig</code> <p>LabNodeConfig instance.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.LabNodeSnmpV2cCredentials","title":"<code>LabNodeSnmpV2cCredentials</code>  <code>dataclass</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>SNMP v2c Credentials.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.LabNodeUserCredentials","title":"<code>LabNodeUserCredentials</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>User credentials.</p> <p>Attributes:</p> Name Type Description <code>user</code> <code>str</code> <p>Local user name.</p> <code>password</code> <code>str</code> <p>Plain-text password.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.LabNodeUserCredentials.from_dict","title":"<code>from_dict(data)</code>  <code>staticmethod</code>","text":"<p>Get user credentials from dict.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.LinkProtocolConfig","title":"<code>LinkProtocolConfig</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>Protocol settings.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.Listen","title":"<code>Listen</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>Listener configuration.</p> <p>Used to proxy host's ports into the container.</p> <p>Accepts formats: <pre><code>* &lt;port&gt;\n* \"&lt;port&gt;\"\n* \"&lt;address&gt;:&lt;port&gt;\"\n* {\"port\": &lt;port&gt;}\n* {\"address\": \"&lt;address&gt;\", \"port\": &lt;port&gt;}\n</code></pre></p> <p>Attributes:</p> Name Type Description <code>address</code> <code>str</code> <p>Listen address.</p> <code>port</code> <code>int</code> <p>Listen port.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.Listen.__str__","title":"<code>__str__()</code>","text":"<p>str() implementation.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.Listen.default","title":"<code>default()</code>  <code>classmethod</code>","text":"<p>Default value.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.Listen.docker_compose_port","title":"<code>docker_compose_port(container_port)</code>","text":"<p>Generate configuration for port forwarding.</p> <p>Parameters:</p> Name Type Description Default <code>container_port</code> <code>int</code> <p>Port in the container.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Port configuration for docker compose.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.Listen.from_dict","title":"<code>from_dict(data)</code>  <code>staticmethod</code>","text":"<p>Generate listener from data.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Union[dict[str, Any], int, str]</code> <p>Incoming data.</p> required <p>Returns:</p> Type Description <code>Listen</code> <p>A configured Listener instance.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.NocConfig","title":"<code>NocConfig</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>The <code>noc</code> section of the config.</p> <p>Attributes:</p> Name Type Description <code>tag</code> <code>str</code> <p>NOC image tag</p> <code>path</code> <code>Optional[str]</code> <p>An optional path to the NOC source code. If not empty, image's <code>/opt/noc</code> will be replaced with.</p> <code>ui_path</code> <code>Optional[str]</code> <p>An optional path to the compiled UI. If not empty, static image's <code>/www</code> will be replaced with.</p> <code>custom</code> <code>Optional[str]</code> <p>Optional path to the custom, will be mounted in the <code>/opt/noc_custom</code> directory.</p> <code>installation_name</code> <code>str</code> <p>The installation name which will be shown in the interface.</p> <code>theme</code> <code>Literal['noc', 'gray']</code> <p>Web interface theme. One of: <code>noc</code>, <code>gray</code>.</p> <code>language</code> <code>Literal['en', 'ru']</code> <p>Web interface language.</p> <code>migrate</code> <code>bool</code> <p>Run migrations on start</p> <code>config</code> <code>Optional[Dict[str, Any]]</code> <p>User-defined config.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.NocConfig.default","title":"<code>default()</code>  <code>staticmethod</code>","text":"<p>Get default NocConfig.</p> <p>Returns:</p> Type Description <code>NocConfig</code> <p>NocConfig instance.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.NocConfig.from_dict","title":"<code>from_dict(data)</code>  <code>staticmethod</code>","text":"<p>Generate NocConfig instance from a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict[str, Any]</code> <p>Incoming data.</p> required <p>Returns:</p> Type Description <code>NocConfig</code> <p>A configured NocConfig instance.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.PoolAddressConfig","title":"<code>PoolAddressConfig</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>Pool addresses configuration.</p> <p>Attributes:</p> Name Type Description <code>gw</code> <code>Optional[IPv4Address]</code> <p>Gateway address for <code>pool-gw</code>.</p> <code>syslog</code> <code>Optional[IPv4Address]</code> <p>Syslog collector address.</p> <code>trap</code> <code>Optional[IPv4Address]</code> <p>SNMP trap address.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.PoolAddressConfig.from_dict","title":"<code>from_dict(data)</code>  <code>staticmethod</code>","text":"<p>Get addresses config from dict.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.PoolAddressConfig.iter_used","title":"<code>iter_used()</code>","text":"<p>Iterate all used addresses.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.PoolConfig","title":"<code>PoolConfig</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>The <code>pools</code> section of config.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Pool name.</p> <code>subnet</code> <code>IPv4Prefix</code> <p>Allocated subnet.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.PoolConfig.from_dict","title":"<code>from_dict(name, data)</code>  <code>staticmethod</code>","text":"<p>Generate PoolConfig instance from a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Pool name.</p> required <code>data</code> <code>Dict[str, Any]</code> <p>Incoming data.</p> required <p>Returns:</p> Type Description <code>PoolConfig</code> <p>A configured PoolConfig instance.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.ServiceConfig","title":"<code>ServiceConfig</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>The <code>services</code> section of the config.</p> <p>Attributes:</p> Name Type Description <code>tag</code> <code>Optional[str]</code> <p>Override <code>noc.tag</code> setting for a service if not empty.</p> <code>scale</code> <code>int</code> <p>Number of concurrently running servers. 0 - disable.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.ServiceConfig.default","title":"<code>default()</code>  <code>staticmethod</code>","text":"<p>Get default ServiceConfig.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.ServiceConfig.from_dict","title":"<code>from_dict(data)</code>  <code>staticmethod</code>","text":"<p>Generate ServiceConfig instance from a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict[str, Any]</code> <p>Incoming data.</p> required <p>Returns:</p> Type Description <code>ServiceConfig</code> <p>A configured ServiceConfig instance.</p>"},{"location":"reference/code/gufo/thor/config/#gufo.thor.config.get_sample","title":"<code>get_sample(name)</code>","text":"<p>Get preconfigured config sample by name.</p> <p>All samples are preserved in <code>samples</code> directory.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Sample name, without <code>.yml</code> extension.</p> required <p>Returns:</p> Type Description <code>str</code> <p>A string containinng sample code.</p>"},{"location":"reference/code/gufo/thor/docker/","title":"gufo.thor.docker","text":"<p>Docker utilities.</p> <p>Attributes:</p> Name Type Description <code>docker</code> <p>Docker singleton.</p>"},{"location":"reference/code/gufo/thor/docker/#gufo.thor.docker.Docker","title":"<code>Docker</code>","text":"<p>               Bases: <code>object</code></p> <p>Docker wrapper.</p>"},{"location":"reference/code/gufo/thor/docker/#gufo.thor.docker.Docker.logging_driver","title":"<code>logging_driver</code>  <code>cached</code> <code>property</code>","text":"<p>Get docker logging driver.</p> <p>Returns:</p> Type Description <code>str</code> <p>logging driver name.</p>"},{"location":"reference/code/gufo/thor/docker/#gufo.thor.docker.Docker.destroy","title":"<code>destroy()</code>","text":"<p>Destroy installation.</p> <p>Returns:</p> Name Type Description <code>True</code> <code>bool</code> <p>if command executed successfully.</p> <code>False</code> <code>bool</code> <p>otherwise.</p>"},{"location":"reference/code/gufo/thor/docker/#gufo.thor.docker.Docker.die","title":"<code>die(msg)</code>  <code>staticmethod</code>","text":"<p>Show error message and die.</p>"},{"location":"reference/code/gufo/thor/docker/#gufo.thor.docker.Docker.down","title":"<code>down(*args)</code>","text":"<p>Down services' containers.</p> <p>Returns:</p> Name Type Description <code>True</code> <code>bool</code> <p>if command executed successfully.</p> <code>False</code> <code>bool</code> <p>otherwise.</p>"},{"location":"reference/code/gufo/thor/docker/#gufo.thor.docker.Docker.logs","title":"<code>logs(*args, _follow=False)</code>","text":"<p>Show logs.</p>"},{"location":"reference/code/gufo/thor/docker/#gufo.thor.docker.Docker.pull","title":"<code>pull()</code>","text":"<p>Pull containers.</p> <p>Returns:</p> Name Type Description <code>True</code> <code>bool</code> <p>if command executed successfully.</p> <code>False</code> <code>bool</code> <p>otherwise.</p>"},{"location":"reference/code/gufo/thor/docker/#gufo.thor.docker.Docker.restart","title":"<code>restart(*args)</code>","text":"<p>Perform services restart.</p> <p>Returns:</p> Name Type Description <code>True</code> <code>bool</code> <p>if command executed successfully.</p> <code>False</code> <code>bool</code> <p>otherwise.</p>"},{"location":"reference/code/gufo/thor/docker/#gufo.thor.docker.Docker.shell","title":"<code>shell()</code>","text":"<p>Run shell in container.</p> <p>Returns:</p> Name Type Description <code>True</code> <code>bool</code> <p>if command executed successfully.</p> <code>False</code> <code>bool</code> <p>otherwise.</p>"},{"location":"reference/code/gufo/thor/docker/#gufo.thor.docker.Docker.stats","title":"<code>stats()</code>","text":"<p>Show container stats.</p> <p>Returns:</p> Name Type Description <code>True</code> <code>bool</code> <p>if command executed successfully.</p> <code>False</code> <code>bool</code> <p>otherwise.</p>"},{"location":"reference/code/gufo/thor/docker/#gufo.thor.docker.Docker.stop","title":"<code>stop()</code>","text":"<p>Perform docker compose stop.</p> <p>Returns:</p> Name Type Description <code>True</code> <code>bool</code> <p>if command executed successfully.</p> <code>False</code> <code>bool</code> <p>otherwise.</p>"},{"location":"reference/code/gufo/thor/docker/#gufo.thor.docker.Docker.up","title":"<code>up()</code>","text":"<p>Perform docker compose up -d.</p> <p>Returns:</p> Name Type Description <code>True</code> <code>bool</code> <p>if command executed successfully.</p> <code>False</code> <code>bool</code> <p>otherwise.</p>"},{"location":"reference/code/gufo/thor/docker/#gufo.thor.docker.DockerConfig","title":"<code>DockerConfig</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>Docker daemon configuration.</p> <p>Attributes:</p> Name Type Description <code>logging_driver</code> <code>str</code> <p>Current logging driver.</p> <code>server_version</code> <code>str</code> <p>Current docker server version.</p>"},{"location":"reference/code/gufo/thor/error/","title":"gufo.thor.error","text":"<p>Error classes.</p>"},{"location":"reference/code/gufo/thor/error/#gufo.thor.error.CancelExecution","title":"<code>CancelExecution</code>","text":"<p>               Bases: <code>ThorError</code></p> <p>Stop execution and exit with error.</p>"},{"location":"reference/code/gufo/thor/error/#gufo.thor.error.ThorError","title":"<code>ThorError</code>","text":"<p>               Bases: <code>BaseException</code></p> <p>Base class for errors.</p>"},{"location":"reference/code/gufo/thor/ip/","title":"gufo.thor.ip","text":"<p>IP address manipulation primitives.</p>"},{"location":"reference/code/gufo/thor/ip/#gufo.thor.ip.IPv4Address","title":"<code>IPv4Address</code>","text":"<p>               Bases: <code>object</code></p> <p>IPv4 Address.</p>"},{"location":"reference/code/gufo/thor/ip/#gufo.thor.ip.IPv4Address.__add__","title":"<code>__add__(v)</code>","text":"<p>Add integer value to address.</p>"},{"location":"reference/code/gufo/thor/ip/#gufo.thor.ip.IPv4Address.__eq__","title":"<code>__eq__(value)</code>","text":"<p>== implementation.</p>"},{"location":"reference/code/gufo/thor/ip/#gufo.thor.ip.IPv4Address.__hash__","title":"<code>__hash__()</code>","text":"<p>hash() implementation.</p>"},{"location":"reference/code/gufo/thor/ip/#gufo.thor.ip.IPv4Address.__int__","title":"<code>__int__()</code>","text":"<p>Convert to integer.</p>"},{"location":"reference/code/gufo/thor/ip/#gufo.thor.ip.IPv4Address.__repr__","title":"<code>__repr__()</code>","text":"<p>repr() implementation.</p>"},{"location":"reference/code/gufo/thor/ip/#gufo.thor.ip.IPv4Address.__str__","title":"<code>__str__()</code>","text":"<p>Convert to str.</p>"},{"location":"reference/code/gufo/thor/ip/#gufo.thor.ip.IPv4Address.as_isis_net","title":"<code>as_isis_net(area=1)</code>","text":"<p>Convert ip address to ISIS network.</p> <p>Parameters:</p> Name Type Description Default <code>area</code> <code>int</code> <p>ISIS area.</p> <code>1</code> <p>Returns:</p> Type Description <code>str</code> <p>ISIS network.</p>"},{"location":"reference/code/gufo/thor/ip/#gufo.thor.ip.IPv4Address.default","title":"<code>default()</code>  <code>staticmethod</code>","text":"<p>Get default IPv4 address.</p>"},{"location":"reference/code/gufo/thor/ip/#gufo.thor.ip.IPv4Address.from_int","title":"<code>from_int(v)</code>  <code>classmethod</code>","text":"<p>Convert integer to IP address.</p>"},{"location":"reference/code/gufo/thor/ip/#gufo.thor.ip.IPv4Address.to_prefix","title":"<code>to_prefix(mask)</code>","text":"<p>Convert address to prefix.</p> <p>Parameters:</p> Name Type Description Default <code>mask</code> <code>int</code> <p>Prefix mask.</p> required <p>Returns:</p> Type Description <code>IPv4Prefix</code> <p>Resulting prefix.</p>"},{"location":"reference/code/gufo/thor/ip/#gufo.thor.ip.IPv4Prefix","title":"<code>IPv4Prefix</code>","text":"<p>               Bases: <code>object</code></p> <p>IPv4 Prefix.</p>"},{"location":"reference/code/gufo/thor/ip/#gufo.thor.ip.IPv4Prefix.mask","title":"<code>mask</code>  <code>property</code>","text":"<p>Get mask of prefix.</p>"},{"location":"reference/code/gufo/thor/ip/#gufo.thor.ip.IPv4Prefix.network","title":"<code>network</code>  <code>property</code>","text":"<p>Get network part of prefix.</p>"},{"location":"reference/code/gufo/thor/ip/#gufo.thor.ip.IPv4Prefix.__add__","title":"<code>__add__(v)</code>","text":"<p>Add integer value to prefix.</p>"},{"location":"reference/code/gufo/thor/ip/#gufo.thor.ip.IPv4Prefix.__contains__","title":"<code>__contains__(item)</code>","text":"<p><code>in</code> implementation.</p>"},{"location":"reference/code/gufo/thor/ip/#gufo.thor.ip.IPv4Prefix.__eq__","title":"<code>__eq__(value)</code>","text":"<p>== implementation.</p>"},{"location":"reference/code/gufo/thor/ip/#gufo.thor.ip.IPv4Prefix.__hash__","title":"<code>__hash__()</code>","text":"<p>hash() implementation.</p>"},{"location":"reference/code/gufo/thor/ip/#gufo.thor.ip.IPv4Prefix.__repr__","title":"<code>__repr__()</code>","text":"<p>repr() implementation.</p>"},{"location":"reference/code/gufo/thor/ip/#gufo.thor.ip.IPv4Prefix.__str__","title":"<code>__str__()</code>","text":"<p>Convert to str.</p>"},{"location":"reference/code/gufo/thor/ip/#gufo.thor.ip.IPv4Prefix.default","title":"<code>default()</code>  <code>staticmethod</code>","text":"<p>Get default IPv4 address.</p>"},{"location":"reference/code/gufo/thor/ip/#gufo.thor.ip.IPv4Prefix.first_free","title":"<code>first_free(used)</code>","text":"<p>Find first free address in prefix.</p> <p>Parameters:</p> Name Type Description Default <code>used</code> <code>Iterable[IPv4Address]</code> <p>Iterable of used IP addresses.</p> required <p>Returns:</p> Type Description <code>Optional[IPv4Address]</code> <p>First free address, None if no free addresses.</p>"},{"location":"reference/code/gufo/thor/ip/#gufo.thor.ip.IPv4Prefix.to_prefix","title":"<code>to_prefix(addr)</code>","text":"<p>Add mask to address.</p>"},{"location":"reference/code/gufo/thor/log/","title":"gufo.thor.log","text":"<p>Loggers.</p> <p>Attributes:</p> Name Type Description <code>logger</code> <p>logger instance</p>"},{"location":"reference/code/gufo/thor/secret/","title":"gufo.thor.secret","text":"<p>Secret class.</p>"},{"location":"reference/code/gufo/thor/secret/#gufo.thor.secret.Secret","title":"<code>Secret</code>","text":"<p>               Bases: <code>object</code></p> <p>Secret.</p> <p>Wrapper for managing secrets.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Secret name.</p> required <code>config_path</code> <code>Optional[str]</code> <p>Optional dot-separated path from NOC's config.</p> <code>None</code>"},{"location":"reference/code/gufo/thor/secret/#gufo.thor.secret.Secret.path","title":"<code>path</code>  <code>property</code>","text":"<p>Path to file containing secret.</p>"},{"location":"reference/code/gufo/thor/secret/#gufo.thor.secret.Secret.__enter__","title":"<code>__enter__()</code>","text":"<p>Context manager.</p> <p>Remove secret's persistent artefacts on exit.</p>"},{"location":"reference/code/gufo/thor/secret/#gufo.thor.secret.Secret.__exit__","title":"<code>__exit__(type_, value, traceback)</code>","text":"<p>Exit on context manager.</p>"},{"location":"reference/code/gufo/thor/secret/#gufo.thor.secret.Secret.check_config","title":"<code>check_config(cfg)</code>","text":"<p>Check config.</p> <p>If secret is set in config, write to secret file and issue warning.</p>"},{"location":"reference/code/gufo/thor/secret/#gufo.thor.secret.Secret.ensure_secret","title":"<code>ensure_secret()</code>","text":"<p>Write secret when necessary.</p>"},{"location":"reference/code/gufo/thor/secret/#gufo.thor.secret.Secret.generate","title":"<code>generate()</code>  <code>classmethod</code>","text":"<p>Generate new secret.</p>"},{"location":"reference/code/gufo/thor/secret/#gufo.thor.secret.Secret.iter_secrets","title":"<code>iter_secrets()</code>  <code>classmethod</code>","text":"<p>Iterate over all secrets.</p>"},{"location":"reference/code/gufo/thor/secret/#gufo.thor.secret.Secret.set_secret","title":"<code>set_secret(secret)</code>","text":"<p>Set externally known secret.</p>"},{"location":"reference/code/gufo/thor/utils/","title":"gufo.thor.utils","text":"<p>Various utilities.</p>"},{"location":"reference/code/gufo/thor/utils/#gufo.thor.utils.ensure_directory","title":"<code>ensure_directory(path)</code>","text":"<p>Check directory is exists and create, if necessary.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>Directory path.</p> required"},{"location":"reference/code/gufo/thor/utils/#gufo.thor.utils.is_test","title":"<code>is_test()</code>","text":"<p>Check if code executed in the test suite.</p> <p>Returns:</p> Name Type Description <code>True</code> <code>bool</code> <p>If is in test suite.</p> <code>False</code> <code>bool</code> <p>Otherwise.</p>"},{"location":"reference/code/gufo/thor/utils/#gufo.thor.utils.merge_dict","title":"<code>merge_dict(x, y)</code>","text":"<p>Deep merge dictionaries.</p> <p>Do not affect source dictionaries. Second dictionary overrides first.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Dict[str, Any]</code> <p>First dictionary.</p> required <code>y</code> <code>Dict[str, Any]</code> <p>Second dictionary.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Merged dictionary.</p>"},{"location":"reference/code/gufo/thor/utils/#gufo.thor.utils.write_file","title":"<code>write_file(path, content, backup_path=None)</code>","text":"<p>Write data to file.</p> <p>Overwrite file content only if changed. Create all nessessary directories.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>File path.</p> required <code>content</code> <code>Union[str, bytes]</code> <p>File content.</p> required <code>backup_path</code> <code>Optional[Path]</code> <p>Path to store a copy of file when overwritten.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>True</code> <code>bool</code> <p>if file was written.</p> <code>False</code> <code>bool</code> <p>if file wasn't changed.</p>"},{"location":"reference/code/gufo/thor/validator/","title":"gufo.thor.validator","text":"<p>Config validator primitives.</p>"},{"location":"reference/code/gufo/thor/validator/#gufo.thor.validator.ErrorContext","title":"<code>ErrorContext</code>","text":"<p>               Bases: <code>object</code></p> <p>Error reporting context.</p> <p>Usually used as singletone.</p> Example <pre><code>with errors.context(\"section1\"):\n    ...\n    with errors.context(\"subsection1\"):\n        ...\n        errors.error(\"There is error\")\n</code></pre>"},{"location":"reference/code/gufo/thor/validator/#gufo.thor.validator.ErrorContext.check","title":"<code>check()</code>","text":"<p>Check there is no errors.</p> <p>Die with message if they are.</p>"},{"location":"reference/code/gufo/thor/validator/#gufo.thor.validator.ErrorContext.context","title":"<code>context(path)</code>","text":"<p>Set current context.</p> <p>Path is appended to existing context. <code>..</code> can be used to set level up.</p> <p>Examples:</p> <pre><code>with errors.context(\"xxx\"):\n    ...\n</code></pre>"},{"location":"reference/code/gufo/thor/validator/#gufo.thor.validator.ErrorContext.copy","title":"<code>copy()</code>","text":"<p>Create copy of ErrorContext.</p>"},{"location":"reference/code/gufo/thor/validator/#gufo.thor.validator.ErrorContext.die","title":"<code>die(msg=None)</code>","text":"<p>Dump errors and stop execution.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>Optional[str]</code> <p>Optional error message to add.</p> <code>None</code>"},{"location":"reference/code/gufo/thor/validator/#gufo.thor.validator.ErrorContext.error","title":"<code>error(message, /, path=None)</code>","text":"<p>Register error.</p> <p>Errors registered in current context, if <code>path</code> is not set, otherwise - in path directly.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Error message.</p> required <code>path</code> <code>Optional[List[str]]</code> <p>Optional path to override current context.</p> <code>None</code>"},{"location":"reference/code/gufo/thor/validator/#gufo.thor.validator.ErrorContext.from_errors","title":"<code>from_errors(ctx)</code>","text":"<p>Restore state from error context.</p>"},{"location":"reference/code/gufo/thor/validator/#gufo.thor.validator.ErrorContext.has_errors","title":"<code>has_errors()</code>","text":"<p>Check if errors are present.</p> <p>Returns:</p> Name Type Description <code>True</code> <code>bool</code> <p>If there is errors.</p> <code>False</code> <code>bool</code> <p>Otherwise</p>"},{"location":"reference/code/gufo/thor/validator/#gufo.thor.validator.ErrorPoint","title":"<code>ErrorPoint</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>Error position.</p>"},{"location":"reference/code/gufo/thor/validator/#gufo.thor.validator.ErrorPoint.__str__","title":"<code>__str__()</code>","text":"<p>str() implementation.</p>"},{"location":"reference/code/gufo/thor/validator/#gufo.thor.validator.as_int","title":"<code>as_int(data, name, /, required=True)</code>","text":"<pre><code>as_int(data: Dict[str, Any], name: str, /, required: Literal[True]) -&gt; int\n</code></pre><pre><code>as_int(data: Dict[str, Any], name: str, /, required: Literal[False]) -&gt; Optional[int]\n</code></pre> <p>Extract int from dict.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict[str, Any]</code> <p>Data dict.</p> required <code>name</code> <code>str</code> <p>parameter name.</p> required <code>required</code> <code>bool</code> <p>Set or non set error if key is missed.</p> <code>True</code> <p>Returns:</p> Type Description <code>Optional[int]</code> <p>integer value, if possible.</p>"},{"location":"reference/code/gufo/thor/validator/#gufo.thor.validator.as_ipv4","title":"<code>as_ipv4(data, name, /, required=True)</code>","text":"<pre><code>as_ipv4(data: Dict[str, Any], name: str, /, required: Literal[True]) -&gt; IPv4Address\n</code></pre><pre><code>as_ipv4(data: Dict[str, Any], name: str, /, required: Literal[False]) -&gt; Optional[IPv4Address]\n</code></pre> <p>Extract IPv4Address from dict.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict[str, Any]</code> <p>Data dict.</p> required <code>name</code> <code>str</code> <p>parameter name.</p> required <code>required</code> <code>bool</code> <p>Set or non set error if key is missed.</p> <code>True</code> <p>Returns:</p> Type Description <code>Optional[IPv4Address]</code> <p>integer value, if possible.</p>"},{"location":"reference/code/gufo/thor/validator/#gufo.thor.validator.as_ipv4_prefix","title":"<code>as_ipv4_prefix(data, name, /, required=True)</code>","text":"<pre><code>as_ipv4_prefix(data: Dict[str, Any], name: str, /, required: Literal[True]) -&gt; IPv4Prefix\n</code></pre><pre><code>as_ipv4_prefix(data: Dict[str, Any], name: str, /, required: Literal[False]) -&gt; Optional[IPv4Prefix]\n</code></pre> <p>Extract IPv4Prefix from dict.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict[str, Any]</code> <p>Data dict.</p> required <code>name</code> <code>str</code> <p>parameter name.</p> required <code>required</code> <code>bool</code> <p>Set or non set error if key is missed.</p> <code>True</code> <p>Returns:</p> Type Description <code>Optional[IPv4Prefix]</code> <p>integer value, if possible.</p>"},{"location":"reference/code/gufo/thor/validator/#gufo.thor.validator.as_str","title":"<code>as_str(data, name, /, required=True)</code>","text":"<pre><code>as_str(data: Dict[str, Any], name: str, /, required: Literal[True]) -&gt; str\n</code></pre><pre><code>as_str(data: Dict[str, Any], name: str, /, required: Literal[False]) -&gt; Optional[str]\n</code></pre> <p>Extract string from dict.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict[str, Any]</code> <p>Data dict.</p> required <code>name</code> <code>str</code> <p>parameter name.</p> required <code>required</code> <code>bool</code> <p>Set or non set error if key is missed.</p> <code>True</code>"},{"location":"reference/code/gufo/thor/labs/","title":"gufo.thor.labs","text":"<p>Lab routers implementations.</p>"},{"location":"reference/code/gufo/thor/labs/base/","title":"gufo.thor.labs.base","text":"<p>BaseLab definition.</p> <p>Attributes:</p> Name Type Description <code>loader</code> <p>The lab loader.</p>"},{"location":"reference/code/gufo/thor/labs/base/#gufo.thor.labs.base.BaseLab","title":"<code>BaseLab</code>","text":"<p>               Bases: <code>object</code></p> <p>Router for lab.</p>"},{"location":"reference/code/gufo/thor/labs/base/#gufo.thor.labs.base.BaseLab.get","title":"<code>get(name)</code>  <code>staticmethod</code>","text":"<p>Get Lab instance.</p>"},{"location":"reference/code/gufo/thor/labs/base/#gufo.thor.labs.base.BaseLab.get_compose_config","title":"<code>get_compose_config(config, lab_config, node_config)</code>","text":"<p>Generate service config for docker compose.</p>"},{"location":"reference/code/gufo/thor/labs/base/#gufo.thor.labs.base.BaseLab.get_compose_image","title":"<code>get_compose_image(config, lab_config, node_config)</code>","text":"<p>Generate compose image name.</p>"},{"location":"reference/code/gufo/thor/labs/base/#gufo.thor.labs.base.BaseLab.get_compose_networks","title":"<code>get_compose_networks(config, lab_config, node_config)</code>","text":"<p>Get volumes settings.</p>"},{"location":"reference/code/gufo/thor/labs/base/#gufo.thor.labs.base.BaseLab.get_compose_volumes","title":"<code>get_compose_volumes(config, lab_config, node_config)</code>","text":"<p>Get service network settings.</p>"},{"location":"reference/code/gufo/thor/labs/base/#gufo.thor.labs.base.BaseLab.get_config_context","title":"<code>get_config_context(config, lab_config, node_config)</code>  <code>classmethod</code>","text":"<p>Get context to render config.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>Full config.</p> required <code>lab_config</code> <code>LabConfig</code> <p>Full lab config.</p> required <code>node_config</code> <code>LabNodeConfig</code> <p>Current node's config.</p> required <p>Returns:</p> Type Description <code>ConfigCtx</code> <p>Context to render templates.</p>"},{"location":"reference/code/gufo/thor/labs/base/#gufo.thor.labs.base.BaseLab.get_config_dir","title":"<code>get_config_dir(lab_config, node_config)</code>","text":"<p>Get root of the configuration directory.</p>"},{"location":"reference/code/gufo/thor/labs/base/#gufo.thor.labs.base.BaseLab.get_eth_interface_name","title":"<code>get_eth_interface_name(n)</code>  <code>classmethod</code>","text":"<p>Generate name for ethernet interface.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>Interface number (zero-based)</p> required <p>Returns:</p> Type Description <code>str</code> <p>interface name</p>"},{"location":"reference/code/gufo/thor/labs/base/#gufo.thor.labs.base.BaseLab.render_file","title":"<code>render_file(path, tpl, **kwargs)</code>  <code>classmethod</code>","text":"<p>Apply a context to the template and write to file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>File path</p> required <code>tpl</code> <code>str</code> <p>Template name (relative to <code>gufo.thor.templates</code>)</p> required <code>kwargs</code> <code>Union[str, int, List[Any]]</code> <p>Template context</p> <code>{}</code>"},{"location":"reference/code/gufo/thor/labs/base/#gufo.thor.labs.base.ConfigCtx","title":"<code>ConfigCtx</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>Config template context.</p> <p>Attributes:</p> Name Type Description <code>hostname</code> <code>str</code> <p>Hostname, may be empty.</p> <code>router_id</code> <code>str</code> <p>router-id, may be empty.</p> <code>has_protocols</code> <code>bool</code> <p>True, if any of protocols set, False otherwise.</p> <code>has_isis</code> <code>bool</code> <p>IS-IS protocol is configured.</p> <code>isis_net</code> <code>str</code> <p>IS-IS network, empty if <code>has_isis</code> is False.</p> <code>eth_interfaces</code> <code>List[EthIfaceSettings]</code> <p>List of configured ethernet interfaces.</p>"},{"location":"reference/code/gufo/thor/labs/base/#gufo.thor.labs.base.EthIfaceSettings","title":"<code>EthIfaceSettings</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>Ethernet interface settings.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Interface name.</p> <code>address</code> <code>str</code> <p>IPv4 address.</p> <code>description</code> <code>str</code> <p>Interface description.</p> <code>is_isis</code> <code>bool</code> <p>IS-IS is configured on interface.</p> <code>isis_metric</code> <code>Optional[int]</code> <p>IS-IS metric for interface, if not empty.</p>"},{"location":"reference/code/gufo/thor/labs/vyos/","title":"gufo.thor.labs.vyos","text":"<p>VyOS lab router.</p>"},{"location":"reference/code/gufo/thor/labs/vyos/#gufo.thor.labs.vyos.VyOSLab","title":"<code>VyOSLab</code>","text":"<p>               Bases: <code>BaseLab</code></p> <p>VyOS lab router.</p>"},{"location":"reference/code/gufo/thor/labs/vyos/#gufo.thor.labs.vyos.VyOSLab.get_compose_volumes","title":"<code>get_compose_volumes(config, lab_config, node_config)</code>","text":"<p>Generate volumes settings.</p>"},{"location":"reference/code/gufo/thor/services/","title":"gufo.thor.services","text":"<p>Services definitions.</p>"},{"location":"reference/code/gufo/thor/services/activator/","title":"gufo.thor.services.activator","text":"<p>activator service.</p> <p>Attributes:</p> Name Type Description <code>activator</code> <p>activator service singleton.</p>"},{"location":"reference/code/gufo/thor/services/activator/#gufo.thor.services.activator.ActivatorService","title":"<code>ActivatorService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>activator service.</p>"},{"location":"reference/code/gufo/thor/services/auth/","title":"gufo.thor.services.auth","text":"<p>login service.</p> <p>Attributes:</p> Name Type Description <code>auth</code> <p>auth service singleton.</p>"},{"location":"reference/code/gufo/thor/services/auth/#gufo.thor.services.auth.AuthService","title":"<code>AuthService</code>","text":"<p>               Bases: <code>NocHcService</code></p> <p>auth service.</p>"},{"location":"reference/code/gufo/thor/services/base/","title":"gufo.thor.services.base","text":"<p>BaseService definition.</p> <p>Attributes:</p> Name Type Description <code>loader</code> <p>The service loader.</p>"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.BaseService","title":"<code>BaseService</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for the service declaration.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Service name</p> <code>is_noc</code> <code>bool</code> <p>True, if the service is belongs to NOC</p> <code>dependencies</code> <code>Optional[Tuple[BaseService, ...]]</code> <p>Optional list of dependencies</p> <code>compose_image</code> <code>str</code> <p>docker image name. Override <code>get_compose_image</code> to implement config-depended behavior.</p> <code>compose_depends_condition</code> <code>ComposeDependsCondition</code> <p>Condition for all dependend services. Override <code>get_compose_dependens_condition</code> to implement custom behavior.</p> <code>compose_healthcheck</code> <code>Optional[Dict[str, Any]]</code> <p>Healtcheck section, if any. Override <code>get_compose_healthcheck</code> to implement custom behavior.</p> <code>compose_command</code> <code>Optional[str]</code> <p><code>command</code> section, if any. Override <code>get_compose_command</code> to implement custom behavior.</p> <code>compose_entrypoint</code> <code>Optional[str]</code> <p><code>entrypoint</code> section, if any. Override <code>get_compose_entrypoint</code> to implement custom behavior.</p> <code>compose_working_dir</code> <code>Optional[str]</code> <p><code>working_dir</code> section if any. Override <code>get_compose_working_dir</code> to implement custom behavior.</p> <code>compose_volumes</code> <code>Optional[List[str]]</code> <p><code>volumes</code> section, if any. Override <code>get_compose_volumes</code> to implement custom behavior.</p> <code>compose_volumes_config</code> <code>Optional[Dict[str, Dict[str, Any]]]</code> <p>Global <code>volumes</code> section, if any. Override <code>get_compose_volumes_config</code> to implement custom behavior.</p> <code>compose_environment</code> <code>Optional[Dict[str, str]]</code> <p><code>environment</code> section, if any. Override <code>get_compose_environment</code> to implement custom behavior.</p> <code>compose_labels</code> <code>Optional[List[str]]</code> <p><code>labels</code> section, if any. Override <code>get_compose_labels</code> to implement custom behavior.</p> <code>compose_secrets</code> <code>Optional[List[Secret]]</code> <p><code>secrets</code> section, if any. Override <code>get_compose_secrets</code> to implement custom behavior.</p> <code>compose_secrets_for_dependencies</code> <code>Optional[List[Secret]]</code> <p>Additional secrets which must be added to dependant services.</p> <code>compose_configs</code> <code>Optional[List[Artefact]]</code> <p><code>configs</code> section, if any. Override <code>get_compose_configs</code> to implement custom behavior.</p> <code>compose_extra</code> <code>Optional[Dict[str, Any]]</code> <p>Additional parameters to be merged with the compose config. Override <code>get_compose_extra</code> to implement custom behavior.</p> <code>allow_scale</code> <code>bool</code> <p>If the service allows running multiple instances.</p> <code>require_slots</code> <code>bool</code> <p>If the service requires slots creation.</p> <code>expose_http_prefix</code> <code>Optional[str]</code> <p>Optional prefix to be exposed on edge proxy. Override <code>get_exposed_http_prefix</code> to implement custom behavior.</p> <code>require_http_auth</code> <code>bool</code> <p>True, if the service protected by http auth proxy.</p> <code>rewrite_http_prefix</code> <code>Optional[str]</code> <p>If set, rewrite matched http prefix before passing request to upstream.</p> <code>service_port</code> <code>Optional[int]</code> <p>If set, register service to port in service discovery.</p>"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.BaseService.as_pooled","title":"<code>as_pooled(pool)</code>","text":"<p>Return instance bound to pool.</p>"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.BaseService.get","title":"<code>get(name)</code>  <code>staticmethod</code>","text":"<p>Get service instance by name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Service name.</p> required <p>Returns:</p> Type Description <code>BaseService</code> <p>BaseService instance.</p>"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.BaseService.get_compose_command","title":"<code>get_compose_command(config, svc)</code>","text":"<p>Get docker-compose.yml <code>command</code> section.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>Gufo Thor config instance</p> required <code>svc</code> <code>Optional[ServiceConfig]</code> <p>Service's config from <code>services</code> part, if any.</p> required <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Command, if not empty</p>"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.BaseService.get_compose_config","title":"<code>get_compose_config(config, svc)</code>","text":"<p>Generate config for docker-compose target.</p> <p>The following functions are used to build config:</p> <ul> <li><code>get_compose_image</code> -vto build <code>image</code> section.</li> <li><code>iter_dependencies</code> - to build <code>depends_on</code> section.</li> <li><code>get_compose_working_dir</code> - to build <code>working_dir</code> section.</li> <li><code>get_compose_command</code> - to build <code>command</code> section.</li> <li><code>get_compose_entrypoint</code> - to build <code>entrypoint</code> section.</li> <li><code>get_compose_volumes</code> - to build <code>volumes</code> section.</li> <li><code>get_compose_networks</code> - to build <code>networks</code> section.</li> <li><code>get_compose_ports</code> - to build <code>ports</code> section.</li> <li><code>get_compose_environment</code> - to build <code>environments</code> section.</li> <li><code>get_compose_healthcheck</code> - to build <code>healthcheck</code> section.</li> <li><code>get_compose_extra</code> to add the extra parameters to the result.</li> <li><code>get_compose_labels</code> to add the extra labels to the result.</li> <li>`get_compose_secrets to add the extra secrets to the result.</li> <li>`get_compose_configs to add the extra configs to the result.</li> <li><code>get_compose_logging</code> - to build <code>logging</code> section.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>Gufo Thor config instance</p> required <code>svc</code> <code>Optional[ServiceConfig]</code> <p>Service's config from <code>services</code> part, if any.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>dict of the docker-compose configuration.</p>"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.BaseService.get_compose_configs","title":"<code>get_compose_configs(config, svc)</code>","text":"<p>Get docker-compose.yml <code>configs</code> section.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>Gufo Thor config instance</p> required <code>svc</code> <code>Optional[ServiceConfig]</code> <p>Service's config from <code>services</code> part, if any.</p> required <p>Returns:</p> Type Description <code>Optional[List[Artefact]]</code> <p>List of configs, if not empty.</p>"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.BaseService.get_compose_depends_condition","title":"<code>get_compose_depends_condition(config, svc)</code>","text":"<p>Get condition for all dependend services.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>Gufo Thor config instance</p> required <code>svc</code> <code>Optional[ServiceConfig]</code> <p>Service's config from <code>services</code> part, if any.</p> required <p>Returns:</p> Type Description <code>ComposeDependsCondition</code> <p>Dependency start condition.</p>"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.BaseService.get_compose_entrypoint","title":"<code>get_compose_entrypoint(config, svc)</code>","text":"<p>Get docker-compose.yml <code>entrypoint</code> section.</p> <p>Args: config: Gufo Thor config instance svc: Service's config from <code>services</code> part, if any.</p> <p>Returns: Entrypoint, if not empty</p>"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.BaseService.get_compose_environment","title":"<code>get_compose_environment(config, svc)</code>","text":"<p>Get docker-compose.yml <code>environment</code> section.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>Gufo Thor config instance</p> required <code>svc</code> <code>Optional[ServiceConfig]</code> <p>Service's config from <code>services</code> part, if any.</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, str]]</code> <p>Dict of environment, if not empty</p>"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.BaseService.get_compose_extra","title":"<code>get_compose_extra(config, svc)</code>","text":"<p>Get dict to be merged with compose config/.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>Gufo Thor config instance</p> required <code>svc</code> <code>Optional[ServiceConfig]</code> <p>Service's config from <code>services</code> part, if any.</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, Any]]</code> <p>Dict of extra settings.</p>"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.BaseService.get_compose_healthcheck","title":"<code>get_compose_healthcheck(config, svc)</code>","text":"<p>Get docker-compose.yml <code>healthcheck</code> section.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>Gufo Thor config instance</p> required <code>svc</code> <code>Optional[ServiceConfig]</code> <p>Service's config from <code>services</code> part, if any.</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, Any]]</code> <p>Dict of healthcheck, if not empty</p>"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.BaseService.get_compose_image","title":"<code>get_compose_image(config, svc)</code>","text":"<p>Get docker-compose.yml <code>image</code> section.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>Gufo Thor config instance</p> required <code>svc</code> <code>Optional[ServiceConfig]</code> <p>Service's config from <code>services</code> part, if any.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Image name.</p>"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.BaseService.get_compose_labels","title":"<code>get_compose_labels(config, svc)</code>","text":"<p>Get docker-compose.yml <code>labels</code> section.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>Gufo Thor config instance</p> required <code>svc</code> <code>Optional[ServiceConfig]</code> <p>Service's config from <code>services</code> part, if any.</p> required <p>Returns:</p> Type Description <code>Optional[List[str]]</code> <p>List of labels, if not empty.</p>"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.BaseService.get_compose_logging","title":"<code>get_compose_logging(config, svc)</code>","text":"<p>Get docker-compose.yml <code>logging</code> section.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>Gufo Thor config instance</p> required <code>svc</code> <code>Optional[ServiceConfig]</code> <p>Service's config from <code>services</code> part, if any.</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, Any]]</code> <p>Dict of logging, if not empty</p>"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.BaseService.get_compose_name","title":"<code>get_compose_name()</code>","text":"<p>Get service name for docker-compose.</p>"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.BaseService.get_compose_networks","title":"<code>get_compose_networks(config, svc)</code>","text":"<p>Get docker-compose.yml <code>networks</code> section.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>Gufo Thor config instance</p> required <code>svc</code> <code>Optional[ServiceConfig]</code> <p>Service's config from <code>services</code> part, if any.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Networks dict, if not empty</p>"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.BaseService.get_compose_ports","title":"<code>get_compose_ports(config, svc)</code>","text":"<p>Get docker-compose.yml <code>ports</code> section.</p> <p>Args: config: Gufo Thor config instance svc: Service's config from <code>services</code> part, if any.</p> <p>Returns: List of ports config, if not empty</p>"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.BaseService.get_compose_secrets","title":"<code>get_compose_secrets(config, svc)</code>","text":"<p>Get docker-compose.yml <code>secrets</code> section.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>Gufo Thor config instance</p> required <code>svc</code> <code>Optional[ServiceConfig]</code> <p>Service's config from <code>services</code> part, if any.</p> required <p>Returns:</p> Type Description <code>Optional[List[Secret]]</code> <p>List of secrets, if not empty.</p>"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.BaseService.get_compose_volumes","title":"<code>get_compose_volumes(config, svc)</code>","text":"<p>Get docker-compose.yml <code>volumes</code> section.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>Gufo Thor config instance</p> required <code>svc</code> <code>Optional[ServiceConfig]</code> <p>Service's config from <code>services</code> part, if any.</p> required <p>Returns:</p> Type Description <code>Optional[List[str]]</code> <p>List of volumes config, if not empty.</p>"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.BaseService.get_compose_volumes_config","title":"<code>get_compose_volumes_config(config, svc)</code>","text":"<p>Get docker-compose.yml global <code>volumes</code> section.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>Gufo Thor config instance</p> required <code>svc</code> <code>Optional[ServiceConfig]</code> <p>Service's config from <code>services</code> part, if any.</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, Dict[str, Any]]]</code> <p>Dict of name -&gt; volumes config</p>"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.BaseService.get_compose_working_dir","title":"<code>get_compose_working_dir(config, svc)</code>","text":"<p>Get docker-compose.yml <code>working_dir</code> section.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>Gufo Thor config instance</p> required <code>svc</code> <code>Optional[ServiceConfig]</code> <p>Service's config from <code>services</code> part, if any.</p> required <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Working dir, if not empty</p>"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.BaseService.get_deps_dot","title":"<code>get_deps_dot()</code>  <code>staticmethod</code>","text":"<p>Build dependencies graph in dot format.</p> <p>Returns:</p> Type Description <code>str</code> <p>Dependencies graph.</p>"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.BaseService.get_expose_http_prefix","title":"<code>get_expose_http_prefix(config, svc)</code>","text":"<p>Iterate over exposed http paths.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>Gufo Thor config instance</p> required <code>svc</code> <code>Optional[ServiceConfig]</code> <p>Service's config from <code>services</code> part, if any.</p> required"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.BaseService.iter_dependencies","title":"<code>iter_dependencies()</code>","text":"<p>Iterator yielding the name of dependencies.</p> <p>Returns:</p> Type Description <code>Iterable[BaseService]</code> <p>An iterable of strings which represent the names dependencies.</p>"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.BaseService.prepare_compose_config","title":"<code>prepare_compose_config(config, svc, services)</code>","text":"<p>Prepare service configs.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>Gufo Thor config instance</p> required <code>svc</code> <code>Optional[ServiceConfig]</code> <p>Service's config from <code>services</code> part, if any.</p> required <code>services</code> <code>List[BaseService]</code> <p>List of all services.</p> required"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.BaseService.render","title":"<code>render(tpl, **kwargs)</code>  <code>classmethod</code>","text":"<p>Apply a context to the template and write to file.</p> <p>Parameters:</p> Name Type Description Default <code>tpl</code> <code>str</code> <p>Template name (relative to <code>gufo.thor.templates</code>)</p> required <code>kwargs</code> <code>Union[str, int, None, List[Any]]</code> <p>Template context</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>Rendered template</p>"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.BaseService.resolve","title":"<code>resolve(services)</code>  <code>staticmethod</code>","text":"<p>Resolve services to all dependencies.</p> <p>Parameters:</p> Name Type Description Default <code>services</code> <code>Iterable[str]</code> <p>Iterable of basic services.</p> required <p>Returns:</p> Type Description <code>List[BaseService]</code> <p>Iterable of all basic services and their dependencies.</p>"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.ComposeDependsCondition","title":"<code>ComposeDependsCondition</code>","text":"<p>               Bases: <code>Enum</code></p> <p>depends_on condition.</p> <p>Attributes:</p> Name Type Description <code>STARTED</code> <p>Run dependends after the service is started.</p> <code>HEALTHY</code> <p>Run dependends after the service is started and entered the healhy state.</p> <code>COMPLETED_SUCCESSFULLY</code> <p>Run dependends after the service is started and terminated successfully.</p>"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.Role","title":"<code>Role</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Process' role in NOC.</p> <p>Attributes:</p> Name Type Description <code>OTHER</code> <p>Unspecified role.</p> <code>APP</code> <p>NOC application.</p> <code>DB</code> <p>NOC database.</p> <code>ASSET</code> <p>NOC assets.</p> <code>UTILS</code> <p>Various utilities.</p>"},{"location":"reference/code/gufo/thor/services/base/#gufo.thor.services.base.Role.default","title":"<code>default()</code>  <code>classmethod</code>","text":"<p>Get default value.</p>"},{"location":"reference/code/gufo/thor/services/bh/","title":"gufo.thor.services.bh","text":"<p>bh service.</p> <p>Attributes:</p> Name Type Description <code>bh</code> <p>bh service singleton.</p>"},{"location":"reference/code/gufo/thor/services/bh/#gufo.thor.services.bh.BhService","title":"<code>BhService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>bh service.</p>"},{"location":"reference/code/gufo/thor/services/bi/","title":"gufo.thor.services.bi","text":"<p>bi service.</p> <p>Attributes:</p> Name Type Description <code>bi</code> <p>bi service singleton.</p>"},{"location":"reference/code/gufo/thor/services/bi/#gufo.thor.services.bi.BiService","title":"<code>BiService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>bi service.</p>"},{"location":"reference/code/gufo/thor/services/card/","title":"gufo.thor.services.card","text":"<p>card service definition.</p> <p>Attributes:</p> Name Type Description <code>card</code> <p>card service singleton.</p>"},{"location":"reference/code/gufo/thor/services/card/#gufo.thor.services.card.CardService","title":"<code>CardService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>card service.</p>"},{"location":"reference/code/gufo/thor/services/chwriter/","title":"gufo.thor.services.chwriter","text":"<p>chwriter service.</p> <p>Attributes:</p> Name Type Description <code>chwriter</code> <p>chwriter service singleton.</p>"},{"location":"reference/code/gufo/thor/services/chwriter/#gufo.thor.services.chwriter.ChwriterService","title":"<code>ChwriterService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>chwriter service.</p>"},{"location":"reference/code/gufo/thor/services/classifier/","title":"gufo.thor.services.classifier","text":"<p>classifier service.</p> <p>Attributes:</p> Name Type Description <code>classifier</code> <p>classifier service singleton.</p>"},{"location":"reference/code/gufo/thor/services/classifier/#gufo.thor.services.classifier.ClassifierService","title":"<code>ClassifierService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>classifier service.</p>"},{"location":"reference/code/gufo/thor/services/clickhouse/","title":"gufo.thor.services.clickhouse","text":"<p>clickhouse service.</p> <p>Attributes:</p> Name Type Description <code>clickhouse</code> <p>clickhouse service singleton.</p>"},{"location":"reference/code/gufo/thor/services/clickhouse/#gufo.thor.services.clickhouse.ClickhouseService","title":"<code>ClickhouseService</code>","text":"<p>               Bases: <code>BaseService</code></p> <p>clickhouse service.</p>"},{"location":"reference/code/gufo/thor/services/consul/","title":"gufo.thor.services.consul","text":"<p>consul service.</p> <p>Attributes:</p> Name Type Description <code>consul</code> <p>consul service singleton.</p>"},{"location":"reference/code/gufo/thor/services/consul/#gufo.thor.services.consul.ConsulService","title":"<code>ConsulService</code>","text":"<p>               Bases: <code>BaseService</code></p> <p>consul service.</p>"},{"location":"reference/code/gufo/thor/services/consul/#gufo.thor.services.consul.ConsulService.get_compose_configs","title":"<code>get_compose_configs(config, svc)</code>","text":"<p>Add configs for discovered services.</p>"},{"location":"reference/code/gufo/thor/services/consul/#gufo.thor.services.consul.ConsulService.register_service","title":"<code>register_service(name, port)</code>","text":"<p>Add discovered service.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Service name.</p> required <code>port</code> <code>int</code> <p>Service port.</p> required"},{"location":"reference/code/gufo/thor/services/correlator/","title":"gufo.thor.services.correlator","text":"<p>correlator service.</p> <p>Attributes:</p> Name Type Description <code>correlator</code> <p>correlator service singleton.</p>"},{"location":"reference/code/gufo/thor/services/correlator/#gufo.thor.services.correlator.CorrelatorService","title":"<code>CorrelatorService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>correlator service.</p>"},{"location":"reference/code/gufo/thor/services/datasource/","title":"gufo.thor.services.datasource","text":"<p>datasource service.</p> <p>Attributes:</p> Name Type Description <code>datasource</code> <p>datasource service singleton.</p>"},{"location":"reference/code/gufo/thor/services/datasource/#gufo.thor.services.datasource.DatasourceService","title":"<code>DatasourceService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>datasource service.</p>"},{"location":"reference/code/gufo/thor/services/datastream/","title":"gufo.thor.services.datastream","text":"<p>datastream service.</p> <p>Attributes:</p> Name Type Description <code>datastream</code> <p>datastream service singleton.</p>"},{"location":"reference/code/gufo/thor/services/datastream/#gufo.thor.services.datastream.DatastreamService","title":"<code>DatastreamService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>datastream service.</p>"},{"location":"reference/code/gufo/thor/services/discovery/","title":"gufo.thor.services.discovery","text":"<p>discovery service.</p> <p>Attributes:</p> Name Type Description <code>discovery</code> <p>discovery service singleton.</p>"},{"location":"reference/code/gufo/thor/services/discovery/#gufo.thor.services.discovery.DiscoveryService","title":"<code>DiscoveryService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>discovery service.</p>"},{"location":"reference/code/gufo/thor/services/envoy/","title":"gufo.thor.services.envoy","text":"<p>envoy service.</p> <p>Attributes:</p> Name Type Description <code>eenvoy</code> <p>envoy service singleton.</p>"},{"location":"reference/code/gufo/thor/services/envoy/#gufo.thor.services.envoy.DomainInfo","title":"<code>DomainInfo</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>Information for preconfigured domains.</p> <p>Attributes:</p> Name Type Description <code>domain</code> <code>str</code> <p>Domain name.</p> <code>csr_proxy</code> <code>str</code> <p>CSR Proxy URL</p> <code>subject</code> <code>str</code> <p>CSR subject.</p>"},{"location":"reference/code/gufo/thor/services/envoy/#gufo.thor.services.envoy.EnvoyService","title":"<code>EnvoyService</code>","text":"<p>               Bases: <code>BaseService</code></p> <p>envoy service.</p>"},{"location":"reference/code/gufo/thor/services/envoy/#gufo.thor.services.envoy.EnvoyService.get_cert_subj","title":"<code>get_cert_subj(config)</code>","text":"<p>Get certificate subj.</p>"},{"location":"reference/code/gufo/thor/services/envoy/#gufo.thor.services.envoy.EnvoyService.get_compose_configs","title":"<code>get_compose_configs(config, svc)</code>","text":"<p>Generate configs.</p>"},{"location":"reference/code/gufo/thor/services/envoy/#gufo.thor.services.envoy.EnvoyService.get_compose_networks","title":"<code>get_compose_networks(config, svc)</code>","text":"<p>Get networks section.</p>"},{"location":"reference/code/gufo/thor/services/envoy/#gufo.thor.services.envoy.EnvoyService.get_compose_ports","title":"<code>get_compose_ports(config, svc)</code>","text":"<p>Get ports section.</p>"},{"location":"reference/code/gufo/thor/services/envoy/#gufo.thor.services.envoy.EnvoyService.prepare_compose_config","title":"<code>prepare_compose_config(config, svc, services)</code>","text":"<p>Generate config.</p>"},{"location":"reference/code/gufo/thor/services/envoy/#gufo.thor.services.envoy.Route","title":"<code>Route</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>routes part of config.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Service name.</p> <code>prefix</code> <code>str</code> <p>HTTP prefix.</p> <code>disable_auth</code> <code>bool</code> <p>Disable external authorization.</p> <code>prefix_rewite</code> <code>bool</code> <p>Rewrite prefix, if set.</p> <code>redirect_to</code> <code>Optional[str]</code> <p>Redirect to path, if matched.</p> <code>no_cache</code> <code>bool</code> <p>Add headers which disable caching.</p> <code>is_service</code> <code>bool</code> <p>Expose to <code>clusters</code> section.</p>"},{"location":"reference/code/gufo/thor/services/envoy/#gufo.thor.services.envoy.Route.cluster","title":"<code>cluster</code>  <code>property</code>","text":"<p>Get cluster name.</p>"},{"location":"reference/code/gufo/thor/services/escalator/","title":"gufo.thor.services.escalator","text":"<p>escalator service.</p> <p>Attributes:</p> Name Type Description <code>escalator</code> <p>escalator service singleton.</p>"},{"location":"reference/code/gufo/thor/services/escalator/#gufo.thor.services.escalator.EscalatorService","title":"<code>EscalatorService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>escalator service.</p>"},{"location":"reference/code/gufo/thor/services/grafanads/","title":"gufo.thor.services.grafanads","text":"<p>grafanads service.</p> <p>Attributes:</p> Name Type Description <code>grafanads</code> <p>grafanads service singleton.</p>"},{"location":"reference/code/gufo/thor/services/grafanads/#gufo.thor.services.grafanads.GrafanadsService","title":"<code>GrafanadsService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>grafanads service.</p>"},{"location":"reference/code/gufo/thor/services/icqsender/","title":"gufo.thor.services.icqsender","text":"<p>icqsender service.</p> <p>Attributes:</p> Name Type Description <code>icqsender</code> <p>icqsender service singleton.</p>"},{"location":"reference/code/gufo/thor/services/icqsender/#gufo.thor.services.icqsender.IcqsenderService","title":"<code>IcqsenderService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>icqsender service.</p>"},{"location":"reference/code/gufo/thor/services/kafka/","title":"gufo.thor.services.kafka","text":"<p>kafka service.</p> <p>Attributes:</p> Name Type Description <code>kafka</code> <p>kafka service singleton.</p>"},{"location":"reference/code/gufo/thor/services/kafka/#gufo.thor.services.kafka.KafkaService","title":"<code>KafkaService</code>","text":"<p>               Bases: <code>BaseService</code></p> <p>kafka service.</p>"},{"location":"reference/code/gufo/thor/services/kafkasender/","title":"gufo.thor.services.kafkasender","text":"<p>kafkasender service.</p> <p>Attributes:</p> Name Type Description <code>kafkasender</code> <p>kafkasender service singleton.</p>"},{"location":"reference/code/gufo/thor/services/kafkasender/#gufo.thor.services.kafkasender.KafkasenderService","title":"<code>KafkasenderService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>kafkasender service.</p>"},{"location":"reference/code/gufo/thor/services/login/","title":"gufo.thor.services.login","text":"<p>login service.</p> <p>Attributes:</p> Name Type Description <code>login</code> <p>login service singleton.</p>"},{"location":"reference/code/gufo/thor/services/login/#gufo.thor.services.login.LoginService","title":"<code>LoginService</code>","text":"<p>               Bases: <code>NocHcService</code></p> <p>login service.</p>"},{"location":"reference/code/gufo/thor/services/mailsender/","title":"gufo.thor.services.mailsender","text":"<p>mailsender service.</p> <p>Attributes:</p> Name Type Description <code>mailsender</code> <p>mailsender service singleton.</p>"},{"location":"reference/code/gufo/thor/services/mailsender/#gufo.thor.services.mailsender.MailsenderService","title":"<code>MailsenderService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>mailsender service.</p>"},{"location":"reference/code/gufo/thor/services/metrics/","title":"gufo.thor.services.metrics","text":"<p>metrics service.</p> <p>Attributes:</p> Name Type Description <code>metrics</code> <p>metrics service singleton.</p>"},{"location":"reference/code/gufo/thor/services/metrics/#gufo.thor.services.metrics.MetricsService","title":"<code>MetricsService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>metrics service.</p>"},{"location":"reference/code/gufo/thor/services/metricscollector/","title":"gufo.thor.services.metricscollector","text":"<p>metricscollector service.</p> <p>Attributes:</p> Name Type Description <code>metricscollector</code> <p>metricscollector service singleton.</p>"},{"location":"reference/code/gufo/thor/services/metricscollector/#gufo.thor.services.metricscollector.MetricscollectorService","title":"<code>MetricscollectorService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>metricscollector service.</p>"},{"location":"reference/code/gufo/thor/services/mib/","title":"gufo.thor.services.mib","text":"<p>mib service.</p> <p>Attributes:</p> Name Type Description <code>mib</code> <p>mib service singleton.</p>"},{"location":"reference/code/gufo/thor/services/mib/#gufo.thor.services.mib.MibService","title":"<code>MibService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>mib service.</p>"},{"location":"reference/code/gufo/thor/services/migrate/","title":"gufo.thor.services.migrate","text":"<p>migrate service.</p> <p>Attributes:</p> Name Type Description <code>migrate</code> <p>migrate service singleton.</p>"},{"location":"reference/code/gufo/thor/services/migrate/#gufo.thor.services.migrate.MigrateService","title":"<code>MigrateService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>Database migrations.</p> <p>Migrate is a virtual service which launched just after database services became healthy. Then it applies pending database migrations and exits. Other database-dependend services are started only after successful termination of migrate.</p>"},{"location":"reference/code/gufo/thor/services/migrate/#gufo.thor.services.migrate.MigrateService.get_compose_command","title":"<code>get_compose_command(config, svc)</code>","text":"<p>Get compose command.</p> <p>Considers config.cli.no_migrations option.</p>"},{"location":"reference/code/gufo/thor/services/migrate/#gufo.thor.services.migrate.MigrateService.get_compose_environment","title":"<code>get_compose_environment(config, svc)</code>","text":"<p>Environment settings for container.</p> <p>Additionally set NOC_MIGRATE_SLOTS_PATH.</p>"},{"location":"reference/code/gufo/thor/services/mongo/","title":"gufo.thor.services.mongo","text":"<p>mongo service.</p> <p>Attributes:</p> Name Type Description <code>mongo</code> <p>mongo service singleton.</p>"},{"location":"reference/code/gufo/thor/services/mongo/#gufo.thor.services.mongo.MongoService","title":"<code>MongoService</code>","text":"<p>               Bases: <code>BaseService</code></p> <p>mongo service.</p>"},{"location":"reference/code/gufo/thor/services/mongo/#gufo.thor.services.mongo.MongoService.get_compose_ports","title":"<code>get_compose_ports(config, svc)</code>","text":"<p>Expose port.</p>"},{"location":"reference/code/gufo/thor/services/mrt/","title":"gufo.thor.services.mrt","text":"<p>mrt service.</p> <p>Attributes:</p> Name Type Description <code>mrt</code> <p>mrt service singleton.</p>"},{"location":"reference/code/gufo/thor/services/mrt/#gufo.thor.services.mrt.MrtService","title":"<code>MrtService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>mrt service.</p>"},{"location":"reference/code/gufo/thor/services/mx/","title":"gufo.thor.services.mx","text":"<p>mx service.</p> <p>Attributes:</p> Name Type Description <code>mx</code> <p>mx service singleton.</p>"},{"location":"reference/code/gufo/thor/services/mx/#gufo.thor.services.mx.MxService","title":"<code>MxService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>mx service.</p>"},{"location":"reference/code/gufo/thor/services/nbi/","title":"gufo.thor.services.nbi","text":"<p>nbi service.</p> <p>Attributes:</p> Name Type Description <code>nbi</code> <p>nbi service singleton.</p>"},{"location":"reference/code/gufo/thor/services/nbi/#gufo.thor.services.nbi.NbiService","title":"<code>NbiService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>nbi service.</p>"},{"location":"reference/code/gufo/thor/services/noc/","title":"gufo.thor.services.noc","text":"<p>NocService base class.</p>"},{"location":"reference/code/gufo/thor/services/noc/#gufo.thor.services.noc.NocHcService","title":"<code>NocHcService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>Noc service with healthcheck.</p>"},{"location":"reference/code/gufo/thor/services/noc/#gufo.thor.services.noc.NocService","title":"<code>NocService</code>","text":"<p>               Bases: <code>BaseService</code></p> <p>Basic class for all NOC's services.</p>"},{"location":"reference/code/gufo/thor/services/noc/#gufo.thor.services.noc.NocService.get_compose_command","title":"<code>get_compose_command(config, svc)</code>","text":"<p>Get command section.</p>"},{"location":"reference/code/gufo/thor/services/noc/#gufo.thor.services.noc.NocService.get_compose_environment","title":"<code>get_compose_environment(config, svc)</code>","text":"<p>Get environment section.</p>"},{"location":"reference/code/gufo/thor/services/noc/#gufo.thor.services.noc.NocService.get_compose_extra","title":"<code>get_compose_extra(config, svc)</code>","text":"<p>Set caps.</p>"},{"location":"reference/code/gufo/thor/services/noc/#gufo.thor.services.noc.NocService.get_compose_image","title":"<code>get_compose_image(config, svc)</code>","text":"<p>Get image name.</p> <p>Use tag from service's config, if any. Otherwise use tag from global config.</p>"},{"location":"reference/code/gufo/thor/services/noc/#gufo.thor.services.noc.NocService.get_compose_volumes","title":"<code>get_compose_volumes(config, svc)</code>","text":"<p>Get volumes section.</p> <p>Mount repo and custom when necessary.</p>"},{"location":"reference/code/gufo/thor/services/noc/#gufo.thor.services.noc.NocService.get_compose_volumes_config","title":"<code>get_compose_volumes_config(config, svc)</code>","text":"<p>Generate crashinfo and backup volume.</p>"},{"location":"reference/code/gufo/thor/services/noc/#gufo.thor.services.noc.NocService.prepare_compose_config","title":"<code>prepare_compose_config(config, svc, services)</code>","text":"<p>Render configuration files.</p> <p>NB: As the NocServices is the base class for a bunch of services, ensure, the configuration files are rendered only once.</p>"},{"location":"reference/code/gufo/thor/services/ping/","title":"gufo.thor.services.ping","text":"<p>ping service.</p> <p>Attributes:</p> Name Type Description <code>ping</code> <p>ping service singleton.</p>"},{"location":"reference/code/gufo/thor/services/ping/#gufo.thor.services.ping.PingService","title":"<code>PingService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>ping service.</p>"},{"location":"reference/code/gufo/thor/services/postgres/","title":"gufo.thor.services.postgres","text":"<p>postgres service.</p> <p>Attributes:</p> Name Type Description <code>postgres</code> <p>postgres service singleton.</p>"},{"location":"reference/code/gufo/thor/services/postgres/#gufo.thor.services.postgres.PostgresService","title":"<code>PostgresService</code>","text":"<p>               Bases: <code>BaseService</code></p> <p>postgres service.</p>"},{"location":"reference/code/gufo/thor/services/postgres/#gufo.thor.services.postgres.PostgresService.get_compose_ports","title":"<code>get_compose_ports(config, svc)</code>","text":"<p>Expose port.</p>"},{"location":"reference/code/gufo/thor/services/runner/","title":"gufo.thor.services.runner","text":"<p>worker service.</p> <p>Attributes:</p> Name Type Description <code>runner</code> <p>runner service singleton.</p>"},{"location":"reference/code/gufo/thor/services/runner/#gufo.thor.services.runner.RunnerService","title":"<code>RunnerService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>runner service.</p>"},{"location":"reference/code/gufo/thor/services/sae/","title":"gufo.thor.services.sae","text":"<p>sae service.</p> <p>Attributes:</p> Name Type Description <code>sae</code> <p>sae service singleton.</p>"},{"location":"reference/code/gufo/thor/services/sae/#gufo.thor.services.sae.SaeService","title":"<code>SaeService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>sae service.</p>"},{"location":"reference/code/gufo/thor/services/scheduler/","title":"gufo.thor.services.scheduler","text":"<p>scheduler service.</p> <p>Attributes:</p> Name Type Description <code>scheduler</code> <p>scheduler service singleton.</p>"},{"location":"reference/code/gufo/thor/services/scheduler/#gufo.thor.services.scheduler.SchedulerService","title":"<code>SchedulerService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>scheduler service.</p>"},{"location":"reference/code/gufo/thor/services/selfmon/","title":"gufo.thor.services.selfmon","text":"<p>selfmon service.</p> <p>Attributes:</p> Name Type Description <code>selfmon</code> <p>selfmon service singleton.</p>"},{"location":"reference/code/gufo/thor/services/selfmon/#gufo.thor.services.selfmon.SelfmonService","title":"<code>SelfmonService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>selfmon service.</p>"},{"location":"reference/code/gufo/thor/services/shell/","title":"gufo.thor.services.shell","text":"<p>web service.</p> <p>Attributes:</p> Name Type Description <code>shell</code> <p>shell virtual service singleton.</p>"},{"location":"reference/code/gufo/thor/services/shell/#gufo.thor.services.shell.ShellService","title":"<code>ShellService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>web service.</p>"},{"location":"reference/code/gufo/thor/services/shell/#gufo.thor.services.shell.ShellService.get_compose_command","title":"<code>get_compose_command(config, svc)</code>","text":"<p>Override to bash.</p>"},{"location":"reference/code/gufo/thor/services/static/","title":"gufo.thor.services.static","text":"<p>static service.</p> <p>Attributes:</p> Name Type Description <code>static</code> <p>static service singleton.</p>"},{"location":"reference/code/gufo/thor/services/static/#gufo.thor.services.static.StaticService","title":"<code>StaticService</code>","text":"<p>               Bases: <code>BaseService</code></p> <p>static service.</p>"},{"location":"reference/code/gufo/thor/services/static/#gufo.thor.services.static.StaticService.get_compose_image","title":"<code>get_compose_image(config, svc)</code>","text":"<p>Get image name.</p> <p>Use tag from service's config, if any. Otherwise use tag from global config.</p>"},{"location":"reference/code/gufo/thor/services/static/#gufo.thor.services.static.StaticService.get_compose_volumes","title":"<code>get_compose_volumes(config, svc)</code>","text":"<p>Get volumes section.</p> <p>Mount repo and custom when necessary.</p>"},{"location":"reference/code/gufo/thor/services/syslogcollector/","title":"gufo.thor.services.syslogcollector","text":"<p>syslogcollector service.</p> <p>Attributes:</p> Name Type Description <code>syslogcollector</code> <p>syslogcollector service singleton.</p>"},{"location":"reference/code/gufo/thor/services/syslogcollector/#gufo.thor.services.syslogcollector.SyslogcollectorService","title":"<code>SyslogcollectorService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>syslogcollector service.</p>"},{"location":"reference/code/gufo/thor/services/syslogcollector/#gufo.thor.services.syslogcollector.SyslogcollectorService.get_compose_environment","title":"<code>get_compose_environment(config, svc)</code>","text":"<p>Set listen address.</p>"},{"location":"reference/code/gufo/thor/services/syslogcollector/#gufo.thor.services.syslogcollector.SyslogcollectorService.get_compose_networks","title":"<code>get_compose_networks(config, svc)</code>","text":"<p>Generate docker-compose network.</p>"},{"location":"reference/code/gufo/thor/services/tgsender/","title":"gufo.thor.services.tgsender","text":"<p>tgsender service.</p> <p>Attributes:</p> Name Type Description <code>tgsender</code> <p>tgsender service singleton.</p>"},{"location":"reference/code/gufo/thor/services/tgsender/#gufo.thor.services.tgsender.TgsenderService","title":"<code>TgsenderService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>tgsender service.</p>"},{"location":"reference/code/gufo/thor/services/topo/","title":"gufo.thor.services.topo","text":"<p>topo service.</p> <p>Attributes:</p> Name Type Description <code>topo</code> <p>topo service singleton.</p>"},{"location":"reference/code/gufo/thor/services/topo/#gufo.thor.services.topo.TopoService","title":"<code>TopoService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>topo service.</p>"},{"location":"reference/code/gufo/thor/services/trapcollector/","title":"gufo.thor.services.trapcollector","text":"<p>trapcollector service.</p> <p>Attributes:</p> Name Type Description <code>trapcollector</code> <p>trapcollector service singleton.</p>"},{"location":"reference/code/gufo/thor/services/trapcollector/#gufo.thor.services.trapcollector.TrapcollectorService","title":"<code>TrapcollectorService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>trapcollector service.</p>"},{"location":"reference/code/gufo/thor/services/trapcollector/#gufo.thor.services.trapcollector.TrapcollectorService.get_compose_environment","title":"<code>get_compose_environment(config, svc)</code>","text":"<p>Set listen address.</p>"},{"location":"reference/code/gufo/thor/services/trapcollector/#gufo.thor.services.trapcollector.TrapcollectorService.get_compose_networks","title":"<code>get_compose_networks(config, svc)</code>","text":"<p>Generate docker-compose network.</p>"},{"location":"reference/code/gufo/thor/services/ui/","title":"gufo.thor.services.ui","text":"<p>ui service.</p> <p>Attributes:</p> Name Type Description <code>ui</code> <p>ui service singleton.</p>"},{"location":"reference/code/gufo/thor/services/ui/#gufo.thor.services.ui.UiService","title":"<code>UiService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>ui service.</p>"},{"location":"reference/code/gufo/thor/services/web/","title":"gufo.thor.services.web","text":"<p>web service.</p> <p>Attributes:</p> Name Type Description <code>web</code> <p>web service singleton.</p>"},{"location":"reference/code/gufo/thor/services/web/#gufo.thor.services.web.WebService","title":"<code>WebService</code>","text":"<p>               Bases: <code>NocHcService</code></p> <p>web service.</p>"},{"location":"reference/code/gufo/thor/services/worker/","title":"gufo.thor.services.worker","text":"<p>worker service.</p> <p>Attributes:</p> Name Type Description <code>worker</code> <p>worker service singleton.</p>"},{"location":"reference/code/gufo/thor/services/worker/#gufo.thor.services.worker.WorkerService","title":"<code>WorkerService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>worker service.</p>"},{"location":"reference/code/gufo/thor/services/zeroconf/","title":"gufo.thor.services.zeroconf","text":"<p>zeroconf service.</p> <p>Attributes:</p> Name Type Description <code>zeroconf</code> <p>zeroconf service singleton.</p>"},{"location":"reference/code/gufo/thor/services/zeroconf/#gufo.thor.services.zeroconf.ZeroconfService","title":"<code>ZeroconfService</code>","text":"<p>               Bases: <code>NocService</code></p> <p>zeroconf service.</p>"},{"location":"reference/code/gufo/thor/targets/","title":"gufo.thor.targets","text":"<p>targets module.</p> <p>Targets are the drivers which itermediates with the orchestrator.</p> <p>The following targets are supported out of the box:</p> <ul> <li>compose - docker compose target</li> </ul>"},{"location":"reference/code/gufo/thor/targets/base/","title":"gufo.thor.targets.base","text":"<p>BaseTarget definitions.</p> <p>Attributes:</p> Name Type Description <code>loader</code> <p>Target loader.</p>"},{"location":"reference/code/gufo/thor/targets/base/#gufo.thor.targets.base.BaseTarget","title":"<code>BaseTarget</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for deploy targets.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Target name.</p>"},{"location":"reference/code/gufo/thor/targets/base/#gufo.thor.targets.base.BaseTarget.prepare","title":"<code>prepare()</code>  <code>abstractmethod</code>","text":"<p>Prepare environment before start.</p>"},{"location":"reference/code/gufo/thor/targets/compose/","title":"gufo.thor.targets.compose","text":"<p>docker compose target.</p>"},{"location":"reference/code/gufo/thor/targets/compose/#gufo.thor.targets.compose.ComposeTarget","title":"<code>ComposeTarget</code>","text":"<p>               Bases: <code>BaseTarget</code></p> <p>docker compose target.</p> <p>Prepares <code>docker-compose.yml</code> and all the configuration, then starts with <code>docker compose up -d</code></p>"},{"location":"reference/code/gufo/thor/targets/compose/#gufo.thor.targets.compose.ComposeTarget.migrate","title":"<code>migrate()</code>","text":"<p>Migrate configs.</p>"},{"location":"reference/code/gufo/thor/targets/compose/#gufo.thor.targets.compose.ComposeTarget.prepare","title":"<code>prepare()</code>","text":"<p>Generate docker-compose.yml, data directories, and configs.</p>"},{"location":"reference/code/gufo/thor/targets/compose/#gufo.thor.targets.compose.ComposeTarget.render_config","title":"<code>render_config()</code>","text":"<p>Render <code>docker-compose.yml</code>.</p> <p>Returns:</p> Type Description <code>str</code> <p>String containing config.</p>"},{"location":"reference/config/","title":"thor.yml Configuration Reference","text":"<p>This topic describes <code>thor.yml</code> file format version <code>1.0</code>.</p> <p><code>thor.yml</code> is YAML file defining:</p> <ul> <li>version</li> <li>project</li> <li>noc</li> <li>expose</li> <li>pools</li> <li>services</li> <li>labs</li> </ul>"},{"location":"reference/config/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Overview</li> <li>version</li> <li>project</li> <li>noc</li> <li>expose</li> <li>pools</li> <li>services</li> <li>labs</li> </ul>"},{"location":"reference/config/expose/","title":"Expose Section","text":"<p>Web interface entrypoint configuration.</p>"},{"location":"reference/config/expose/#domain-name","title":"domain_name","text":"<p>Domain name for web interface. By default has the value <code>go.getnoc.com</code> which techninally resolves to the localhost. When using default domain name the Gufo Thor is able to sign the domain certificate in fully transparent manner.</p> <p>Warning</p> <p>If you wish to change the <code>domain_name</code> you have to generate private key and sign the certificate by yourself.</p> <pre><code>expose:\n    domain_name: go.getnoc.com\n</code></pre>"},{"location":"reference/config/expose/#web","title":"web","text":"<p>Web interface address and port.</p> <pre><code>expose:\n    web:\n        address: 127.0.0.1\n        port: 32777\n</code></pre>"},{"location":"reference/config/expose/#mongo","title":"mongo","text":"<p>Expose mongo to host:</p> <pre><code>expose:\n    mongo: 27017\n</code></pre>"},{"location":"reference/config/expose/#mtls_ca_cert","title":"mtls_ca_cert","text":"<p>Enable mTLS. Defines path to CA chain, relative to <code>assets</code></p> <p>Example: Use <code>assets/ca.crt</code> as CA certificate. <pre><code>expose:\n    mtls_ca_cert: ca.crt\n</code></pre></p>"},{"location":"reference/config/expose/#postgres","title":"postgres","text":"<p>Expose postgres to host:</p> <pre><code>expose:\n    postgres: 5432\n</code></pre>"},{"location":"reference/config/expose/#open_browser","title":"open_browser","text":"<p>If set to <code>true</code>, open <code>https://&lt;domain_name&gt;:&lt;port&gt;/</code> in browser on every <code>gufo-thor up</code></p> <pre><code>expose:\n    open_browser: true\n</code></pre>"},{"location":"reference/config/labs/","title":"Labs Section","text":"<p>Defines network labs. Each lab contains network nodes and links.</p> <p>Warning</p> <p>docker compose 2.36.0 or later requred</p> <p>Example:</p> <pre><code>labs:\n  lab1:\n    pool: test\n    nodes:\n      r1:\n        type: vyos\n        version: 1.4\n        router-id: 10.0.0.1\n      r2:\n        type: vyos\n        version: 1.4\n        router-id: 10.0.0.2\n    links:\n      - prefix: 10.0.1.0/30\n        node-a: r1\n        node-b: r2\n        protocols:\n          isis:\n            metric: 1000\n</code></pre> <p><code>lab1</code> is the lab name. A configuration file can define multiple labs.</p>"},{"location":"reference/config/labs/#pool","title":"pool","text":"<p>If lab is attached to dedicated pool, <code>pool</code> must refer to one of pools. If pool is set, one of the nodes must be designated as pool-gw</p> <pre><code>labs:\n  lab1:\n    pool: test\n</code></pre>"},{"location":"reference/config/labs/#nodes","title":"nodes","text":"<p>Defines the list of nodes in the lab. Node names are used as keys.</p> <pre><code>labs:\n  lab1:\n    nodes:\n      r1:\n        type: vyos\n        version: 1.4\n        router-id: 10.0.0.1\n      r2:\n        type: vyos\n        version: 1.4\n        router-id: 10.0.0.2\n</code></pre>"},{"location":"reference/config/labs/#nodes-type","title":"type","text":"<p>Specifies the node type. Supported values:</p> <ul> <li><code>vyos</code> \u2014 VyOS virtual router.</li> </ul> <p>Example:</p> <pre><code>labs:\n  lab1:\n    nodes:\n      r1:\n        type: vyos\n</code></pre>"},{"location":"reference/config/labs/#nodes-version","title":"version","text":"<p>Image version for the node.</p> Type Version vyos 1.4 <p>Example:</p> <pre><code>labs:\n  lab1:\n    nodes:\n      r1:\n        type: vyos\n        version: \"1.4\"\n</code></pre>"},{"location":"reference/config/labs/#nodes-router-id","title":"router-id","text":"<p>Specifies the router ID, assigned to the loopback interface.</p> <pre><code>labs:\n  lab1:\n    nodes:\n      r1:\n        router-id: 10.0.0.1\n</code></pre>"},{"location":"reference/config/labs/#nodes-pool-gw","title":"pool-gw","text":"<p>Node will serve as designated gateway to pools. Only one node of lab may be marked as <code>pool-gw</code>.</p> <pre><code>labs:\n  lab1:\n    nodes:\n      r1:\n        pool-gw: true\n</code></pre>"},{"location":"reference/config/labs/#nodes-users","title":"users","text":"<p>List of user credentials</p> <pre><code>labs:\n  lab1:\n    nodes:\n      r1:\n        users:\n          - user: user1\n            password: secret1\n</code></pre>"},{"location":"reference/config/labs/#nodes-users-user","title":"user","text":"<p>User name.</p> <pre><code>labs:\n  lab1:\n    nodes:\n      r1:\n        users:\n          - user: user1\n</code></pre>"},{"location":"reference/config/labs/#nodes-users-password","title":"password","text":"<p>Plaintext password.</p> <pre><code>labs:\n  lab1:\n    nodes:\n      r1:\n        users:\n          - password: secret1\n</code></pre>"},{"location":"reference/config/labs/#nodes-snmp","title":"snmp","text":"<p>Set up snmp credentials. Contains a list of items.</p> <pre><code>labs:\n  lab1:\n    nodes:\n      r1:\n        snmp:\n          - version: v2c\n            community: public\n</code></pre>"},{"location":"reference/config/labs/#nodes-snmp-version","title":"version","text":"<p>SNMP protocol version. Following versions are supported:</p> <ul> <li><code>v2c</code></li> </ul>"},{"location":"reference/config/labs/#nodes-snmp-comminity","title":"community","text":"<p>SNMP community for SNMP v2c. Requred, when version is set to <code>v2c</code>.</p>"},{"location":"reference/config/labs/#links","title":"links","text":"<p>Defines the connections between nodes. Each link is described as an item in the list.</p> <pre><code>labs:\n  lab1:\n    links:\n      - prefix: 10.0.1.0/30\n        node-a: r1\n        node-b: r2\n        protocols:\n          isis:\n            metric: 1000\n</code></pre>"},{"location":"reference/config/labs/#links-prefix","title":"prefix","text":"<p>Network prefix used for the link, typically a <code>/30</code> subnet.</p> <pre><code>labs:\n  lab1:\n    links:\n      - prefix: 10.0.1.0/30\n</code></pre>"},{"location":"reference/config/labs/#links-node-a","title":"node-a","text":"<p>Starting node of the link.</p> <pre><code>labs:\n  lab1:\n    links:\n      - node-a: r1\n</code></pre>"},{"location":"reference/config/labs/#links-node-b","title":"node-b","text":"<p>Ending node of the link.</p> <pre><code>labs:\n  lab1:\n    links:\n      - node-b: r2\n</code></pre>"},{"location":"reference/config/labs/#links-protocols","title":"protocols","text":"<p>Defines enabled protocols on the link.</p> <pre><code>labs:\n  lab1:\n    links:\n      - protocols:\n          isis:\n            metric: 1000\n</code></pre>"},{"location":"reference/config/labs/#links-protocols-isis","title":"isis","text":"<p>Enables the IS-IS protocol on the link.</p> <pre><code>labs:\n  lab1:\n    links:\n      - prefix: 10.0.1.0/30\n        node-a: r1\n        node-b: r2\n        protocols:\n          isis:\n            metric: 1000\n</code></pre>"},{"location":"reference/config/labs/#links-protocols-isis-metric","title":"metric","text":"<p>Optional IS-IS metric for the link.</p> <pre><code>labs:\n  lab1:\n    links:\n      - protocols:\n          isis:\n            metric: 1000\n</code></pre>"},{"location":"reference/config/noc/","title":"NOC Section","text":"<p>Defines common noc configuration.</p>"},{"location":"reference/config/noc/#tag","title":"tag","text":"<p>Defines docker image tag. Default value is <code>master</code>.</p> <pre><code>noc:\n    tag: \"24.1\"\n</code></pre>"},{"location":"reference/config/noc/#path","title":"path","text":"<p>NOC source code path to override container's <code>/opt/noc</code>. Used for development and allows to expose local changes directly in container.</p> <pre><code>noc:\n    path: /home/joe/work/noc\n</code></pre>"},{"location":"reference/config/noc/#custom","title":"custom","text":"<p>NOC custom code path. Allows to mount NOC customizations from local host.</p> <pre><code>noc:\n    custom: /home/joe/work/noc-custom\n</code></pre>"},{"location":"reference/config/noc/#installation_name","title":"installation_name","text":"<p>Installation name as shown in web interface. Has default value <code>Unconfigured Installation</code>.</p> <pre><code>noc:\n    installation_name: \"ACME INC\"\n</code></pre>"},{"location":"reference/config/noc/#migrate","title":"migrate","text":"<p>Run migrations on start. Has default value <code>True</code>.</p> <pre><code>noc:\n    migrate: true\n</code></pre>"},{"location":"reference/config/noc/#theme","title":"theme","text":"<p>Web interface theme, one of: <code>noc</code>, <code>gray</code>. Has default value <code>noc</code>.</p> <pre><code>noc:\n    theme: noc\n</code></pre>"},{"location":"reference/config/noc/#language","title":"language","text":"<p>Web interface language, one of: <code>en</code>, <code>ru</code>.</p> <pre><code>noc:\n    language: en\n</code></pre>"},{"location":"reference/config/pools/","title":"Pools Section","text":"<p>This section contains a pools definitions. Key is pool name.</p> <pre><code>pools:\n  mypool:\n    subnet: 10.0.2.0/24\n</code></pre>"},{"location":"reference/config/pools/#subnet","title":"subnet","text":"<p>Subnet allocated to pool connection network. pool-gw and pool services' addresses will be allocated from this subnet.</p> <pre><code>pools:\n  mypool:\n    subnet: 10.0.2.0/24\n</code></pre>"},{"location":"reference/config/pools/#address","title":"address","text":"<p>Address section allow to pin particolar addresses to services in the pool.</p> <pre><code>pools:\n  mypool:\n    address:\n      gw: 10.0.2.1\n      syslog: 10.0.2.2\n      trap: 10.0.2.3\n</code></pre>"},{"location":"reference/config/pools/#address-gw","title":"gw","text":"<p>Set default gateway to the pools' network. Uses first free IP address in subnet if not set.</p> <pre><code>pools:\n  mypool:\n    address:\n      gw: 10.0.2.1\n</code></pre>"},{"location":"reference/config/pools/#address-syslog","title":"syslog","text":"<p>Set up address for syslog collector in the pool. Will be bound to <code>syslogcollector</code> service.</p> <pre><code>pools:\n  mypool:\n    address:\n      syslog: 10.0.2.2\n</code></pre>"},{"location":"reference/config/pools/#address-trap","title":"trap","text":"<p>Set up address for syslog collector in the pool. Will be bound to <code>trapcollector</code> service.</p> <pre><code>pools:\n  mypool:\n    address:\n      trap: 10.0.2.3\n</code></pre>"},{"location":"reference/config/project/","title":"project","text":"<p>Project name. Defines docker containers name prefix. Used to distingush container names when multiple thor projects are used on same host. By default, the name of directory in which the <code>thor.yml</code> file locates is used as project name.</p> <pre><code>project: mynoc\n</code></pre>"},{"location":"reference/config/services/","title":"Services Section","text":"<p>This section contains a list of services to start. Services can be specified as</p> <ul> <li>list of service names.   <pre><code>services: [web, card]\n</code></pre></li> <li>mapping of service configuration items.   <pre><code>services:\n  web:\n    scale: 4\n  card:\n    scale: 2\n</code></pre></li> </ul>"},{"location":"reference/config/services/#tag","title":"tag","text":"<p>Docker image tag to override global tag section for given service.</p> <pre><code>services:\n    web:\n        tag: \"stable\"\n</code></pre>"},{"location":"reference/config/services/#scale","title":"scale","text":"<p>Number of instances of service to launch. Note, not all services are scalable, so refer to the NOC Services Reference.</p> <pre><code>services:\n    web:\n        scale: 4\n</code></pre>"},{"location":"reference/config/version/","title":"version","text":"<p>File format version. Must have value <code>1.0</code>.</p> <pre><code>version: \"1.0\"\n</code></pre>"}]}